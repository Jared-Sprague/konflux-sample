{
  "version": 3,
  "sources": ["../../../../node_modules/@cpelements/cp-search-autocomplete/_temp/cp-search-autocomplete.js"],
  "sourcesContent": ["/*!\n * PatternFly Elements: CpSearchAutocomplete 0.0.6\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../../../@patternfly/pfelement/dist/pfelement.js\";\nimport \"../../../@patternfly/pfe-autocomplete/dist/pfe-autocomplete.js\";\n\n// /node_modules\n//   @patternfly\n//     pfelement\n//       dist\n//         pfelement.js\n//   @cpelements\n//     cp-search-autocomplete\n//       dist\n//         cp-search-autocomplete.js\n\nclass CpSearchAutocomplete extends PFElement {\n  static get version() {\n    return \"0.0.6\";\n  }\n\n  get html() {\n    return `<style>:host{display:block}:host([hidden]){display:none}pfe-autocomplete input{--pfe-theme--ui--element--size:17px}pfe-autocomplete ul li:hover{color:#252525;background-color:#ececec}\n/*# sourceMappingURL=cp-search-autocomplete.min.css.map */\n</style><pfe-autocomplete id=\"static\" debounce=\"300\"> \n    <input placeholder=\"Enter your search term\">\n</pfe-autocomplete>`;\n  }\n  static get tag() {\n    return \"cp-search-autocomplete\";\n  }\n\n  static get properties() {\n    return {};\n  }\n\n  static get slots() {\n    return {};\n  }\n\n  get templateUrl() {\n    return \"cp-search-autocomplete.html\";\n  }\n\n  get styleUrl() {\n    return \"cp-search-autocomplete.scss\";\n  }\n\n  static get PfeType() {\n    return PFElement.PfeTypes.Container;\n  }\n\n  static get observedAttributes() {\n    return [\"pfe-location\", \"path\", \"query\"];\n  }\n\n  get numItems() {\n    return this.getAttribute(\"num-items\") || 5;\n  }\n\n  constructor() {\n    super(CpSearchAutocomplete, { type: CpSearchAutocomplete.PfeType });\n    this.path = this.getAttribute(\"path\");\n    this._input = this.shadowRoot.querySelector(\"input\");\n    this._data = null;\n\n    this._searchAutocomplete = this.shadowRoot.querySelector(\n      \"pfe-autocomplete\"\n    );\n\n    this._searchAutocomplete.addEventListener(\"pfe-search-event\", e =>\n      console.log(e.detail.searchValue)\n    );\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._fetchData();\n  }\n\n  // Process the attribute change\n  attributeChangedCallback(attr, oldValue, newValue) {\n    super.attributeChangedCallback(attr, oldValue, newValue);\n    if (attr === \"query\") {\n      this._input.value = newValue;\n    }\n  }\n\n  _fetchData() {\n    const path = this.getAttribute(\"path\");\n\n    if (!path) {\n      return;\n    }\n\n    let xhr = new XMLHttpRequest();\n\n    xhr.onload = () => {\n      if (xhr.status === 404) {\n        console.log(\"No data available\");\n      } else {\n        const response = JSON.parse(xhr.responseText);\n        this._data = response;\n        this._initAutocomplete();\n      }\n    };\n\n    xhr.open(\"GET\", this.path, true);\n    xhr.send();\n  }\n\n  _initAutocomplete() {\n    this._searchAutocomplete.autocompleteRequest = (params, callback) => {\n      const regx = new RegExp(\"^\" + params.query, \"i\");\n      const items = this._data;\n      const returnArr = items\n        .filter(function(item) {\n          return regx.test(item);\n        })\n        .slice(0, this.numItems);\n\n      callback(returnArr);\n    };\n  }\n}\n\nPFElement.create(CpSearchAutocomplete);\n\nexport default CpSearchAutocomplete;\n"],
  "mappings": "+EAAA,AAsCA,mBAAmC,EAAU,WAChC,UAAU,CACnB,MAAO,WAGL,OAAO,CACT,MAAO;;;;+BAME,MAAM,CACf,MAAO,mCAGE,aAAa,CACtB,MAAO,aAGE,QAAQ,CACjB,MAAO,MAGL,cAAc,CAChB,MAAO,iCAGL,WAAW,CACb,MAAO,wCAGE,UAAU,CACnB,MAAO,GAAU,SAAS,oBAGjB,qBAAqB,CAC9B,MAAO,CAAC,eAAgB,OAAQ,YAG9B,WAAW,CACb,MAAO,MAAK,aAAa,cAAgB,EAG3C,aAAc,CACZ,MAAM,EAAsB,CAAE,KAAM,EAAqB,UACzD,KAAK,KAAO,KAAK,aAAa,QAC9B,KAAK,OAAS,KAAK,WAAW,cAAc,SAC5C,KAAK,MAAQ,KAEb,KAAK,oBAAsB,KAAK,WAAW,cACzC,oBAGF,KAAK,oBAAoB,iBAAiB,mBAAoB,GAC5D,QAAQ,IAAI,EAAE,OAAO,cAIzB,mBAAoB,CAClB,MAAM,oBAEN,KAAK,aAIP,yBAAyB,EAAM,EAAU,EAAU,CACjD,MAAM,yBAAyB,EAAM,EAAU,GAC3C,IAAS,SACX,MAAK,OAAO,MAAQ,GAIxB,YAAa,CAGX,GAAI,CAFS,KAAK,aAAa,QAG7B,OAGF,GAAI,GAAM,GAAI,gBAEd,EAAI,OAAS,IAAM,CACjB,GAAI,EAAI,SAAW,IACjB,QAAQ,IAAI,yBACP,CACL,GAAM,GAAW,KAAK,MAAM,EAAI,cAChC,KAAK,MAAQ,EACb,KAAK,sBAIT,EAAI,KAAK,MAAO,KAAK,KAAM,IAC3B,EAAI,OAGN,mBAAoB,CAClB,KAAK,oBAAoB,oBAAsB,CAAC,EAAQ,IAAa,CACnE,GAAM,GAAO,GAAI,QAAO,IAAM,EAAO,MAAO,KAEtC,EAAY,AADJ,KAAK,MAEhB,OAAO,SAAS,EAAM,CACrB,MAAO,GAAK,KAAK,KAElB,MAAM,EAAG,KAAK,UAEjB,EAAS,MAKf,EAAU,OAAO",
  "names": []
}
