{
  "version": 3,
  "sources": ["../../../../node_modules/@cpelements/cp-comments/_temp/cp-comments.js"],
  "sourcesContent": ["/*!\n * PatternFly Elements: CpComments 1.0.64\n * @license\n * Copyright 2018 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../../../@patternfly/pfelement/dist/pfelement.js\"; // | umd\nimport \"../../../@patternfly/pfe-avatar/dist/pfe-avatar.js\"; // | umd\nimport \"../../../@patternfly/pfe-button/dist/pfe-button.js\"; // | umd\n\nconst bestResponseIcon = '<span class=\"best-comments-icon\" aria-hidden=\"true\"></span>';\n\n/**\n * Utility function that iterates over the list of badge objects, extracts and returns the HTML element for a given badge\n * from the master list, and returns the list of elements as a concatenated string\n * @param {Array} badges list of badge objects\n * @param {Object} masterList master list of badge data\n * @returns list of elements as a concatenated string\n */\nconst asListOfElements = (badges = [], masterList = {}) => badges.map(badge => (masterList[badge.id] && masterList[badge.id].element) ? masterList[badge.id].element : \"\").join(\"\");\n\n/**\n * Utility function that sorts a list of badge objects by its rank\n * @param {Array} badges list of badge objects\n * @returns reference to array sorted by rank\n */\nconst sortedByRank = (badges = []) => badges.sort((a, b) => b.rank - a.rank);\n\n/**\n * Utility function to determine the correct badges to render under a user's avatar following the guidance here:\n * https://docs.engineering.redhat.com/pages/viewpage.action?spaceKey=CPCORE&title=User+Points+and+Badges\n * @param {Object} badges object of all avatar badges for a given profile\n * @returns list of badge objects\n */\nconst getAvatarBadges = (badges = {}) => {\n  // we only return a maximum of 3 role-based badges, if any\n  const roleBased = (badges.role || []).slice(0, 3);\n  // if the user has an admin badge...\n  if ('admin' in badges) {\n    // discard all points-based badges\n    return [...roleBased, ...(badges.admin || [])];\n  }\n  // otherwise, if the user has points-based badges, return their top one\n  if ('points' in badges) {\n    return [...roleBased, badges.points.shift()]\n  }\n  return [];\n}\n\n/**\n * Utility function to determine the correct badges to render in the eyebrow section of the comment following the guidance here:\n * https://docs.engineering.redhat.com/pages/viewpage.action?spaceKey=CPCORE&title=User+Points+and+Badges\n * @param {Object} badges object of all avatar badges for a given profile\n * @returns list of badge objects\n */\nconst getEyebrowBadges = (badges = {}) => {\n  // only return a maximum of 7 certification-based badges\n  return [...(badges.certification || []).slice(0, 7), ...(badges.manual || []), ...(badges.role || [])];\n}\n\n/**\n * Utility function to determine the correct list of avatar and eyebrow badges to display for a given profile\n * @param {Array} badgeIds list of profile badge ids\n * @param {*} masterList master list of badge data\n * @returns an object with the correct markup for avatar and eyebrow badges\n */\nconst getProfileBadges = (badgeIds = [], masterList = {}) => {\n  /**\n   * Taking the list of ids and creating an object of the badges corresponding to those ids grouped\n   * by location and type.\n   */\n  const groupedByType = badgeIds.reduce((result, id) => {\n    const badge = masterList[id];\n    if (badge) {\n      // add its id as a badge property\n      badge.id = id;\n      result[badge.location] = result[badge.location] || {};\n      result[badge.location][badge.type] = [badge, ...(result[badge.location][badge.type] || [])];\n    }\n    return result;\n  }, {});\n\n  return {\n    avatar: asListOfElements(sortedByRank(getAvatarBadges(groupedByType.avatar)), masterList),\n    eyebrow: asListOfElements(sortedByRank(getEyebrowBadges(groupedByType.eyebrow)), masterList),\n  }\n}\n\n/**\n * Utility function to create a span element representing a badge\n * @param {string} id badge id\n * @param {string} name badge short name\n * @param {string} classNames badge class names\n * @returns {string} HTML element as string\n */\nconst addBadgeElement = (id = \"\", name = \"\", classNames = \"\") => {\n  const span = document.createElement(\"span\");\n  span.classList.add(...[\"badge\", `badge-${id}`, ...classNames]);\n  span.innerText = name;\n  return span.outerHTML;\n}\n\n/**\n * Utility function to shorten badge names\n * @param {string} name badge name\n * @returns {string} badge name, possibly shorter\n */\nconst shortBadgeName = (name = \"\") => {\n  if (name == \"Administrator\") return \"Admin\";\n  // @todo should we consider other special cases for acronyms?\n  if (name.length < 10) return name;\n  // add ellipsis to every word in `name` that's longer than 10 characters\n  return name.split(\" \").map(word => word.length > 10 ? `${word.slice(0, 7)}...`: word).join(\" \").trim();\n}\n\n/**\n * Utility function to generate class(es) to apply to a comment\n * @param {array} flags comment flags\n * @returns {string} class name(s)\n */\nconst commentClassList = (flags) => (flags || []).reduce((classList, flag) => classList += ` cp-comments-comment--${flag}`, \"comment-wrapper\");\n\n/**\n * Utility function to determine whether `allowBestResponse` setting is enabled\n * @param {object} config configuration settings\n * @returns {boolean} true if `allowBestResponse` is enabled\n */\nconst allowBestResponse = (config) =>\n  config && config.cpComments && config.cpComments.allowBestResponse === \"1\";\n\n/**\n * Utility function to determine whether `allowPrivateResponse` setting is enabled.\n * @param {object} config configuration settings\n * @returns {boolean} true if `allowPrivateResponse` is enabled.\n */\nconst allowPrivateResponse = (config) =>\n  config && config.cpComments && config.cpComments.allowPrivateResponse === \"1\";\n\n/**\n * Utility function for fetch response\n * @param {object} response Fetch response object\n * @returns {object} JSON Response as an object\n */\nconst handleFetchResponse = (response) => {\n  if (response && response.status && response.status === 200) {\n    // Success\n    return response.json();\n  }\n  else if (response.status && response.message) {\n    console.error(`cp-comments fetch: ${response.status} Error`, response.message, response);\n  }\n  else if (response.status) {\n    console.error(`cp-comments fetch: ${response.status} Error`, response);\n  }\n  else {\n    console.error(`cp-comments fetch: Error`, response);\n  }\n  return Promise.reject('cp-comments fetch: Received an error from the API');\n}\n\n/**\n * Get the top boundary of an element from the top of the document\n * @param {HTMLElement} $element Element to get the position of\n * @returns {array}\n *    [0] Number, Y Offset of element from the top of the document\n *    [1] Element's boundingClientRect\n */\nconst getElementScrollPosition = ($element) => {\n  if (!$element || typeof $element.getBoundingClientRect !== 'function') {\n    console.error('getElementScrollPosition: Invalid element provided.');\n    return;\n  }\n  const elementBoundingRect = $element.getBoundingClientRect();\n  if (elementBoundingRect && elementBoundingRect.top) {\n    return [Math.round(elementBoundingRect.top + window.scrollY), elementBoundingRect];\n  }\n};\n\n/**\n * Scroll to an element if it's off screen\n * @param {HTMLElement} $element What we want to be in view\n */\nconst scrollToElement = ($element, smooth = false) => {\n  const elementPosition = getElementScrollPosition($element);\n  // Coordinate scroll position has to be at so top of the element is at the top of the screen\n  const elementYOffset = elementPosition[0];\n  // Getting the comment's real height would be tricky due to nesting, adding rough guess\n  const commentHeightBallpark = 200;\n  if (!elementYOffset) {\n    console.error('Encountered error scrolling to element');\n    return;\n  }\n  if (elementPosition[1].top > 0 && elementPosition[1].top < window.innerHeight - commentHeightBallpark) {\n    return;\n  }\n  // Center the element\n  let scrollAdjustment = window.innerHeight / 2 - commentHeightBallpark / 2;\n  const scrollToY = elementYOffset - scrollAdjustment;\n\n  // Only scroll if we're not already there (within 15 px)\n  if (Math.abs(scrollToY - window.scrollY) > 15) {\n    if (smooth) {\n      window.scrollTo({top: scrollToY, behavior: 'smooth'});\n    }\n    else {\n      window.scrollTo(window.scrollX, scrollToY);\n    }\n  }\n};\n\n/**\n * Utility functino to focus text area in comment form\n * @param {HTMLElement} $cpCommentsForm cp-comments-form element or a wrapper of it\n * @return {boolean} Whether or not it was successful focusing the text area\n */\nconst focusCommentFormTextArea = ($cpCommentsForm) => {\n  // Utility function puts a div wrapper on the comment form, get component if we weren't sent it\n  if ($cpCommentsForm.tagName.toLowerCase() !== 'cp-comments-form') {\n    $cpCommentsForm = $cpCommentsForm.querySelector('cp-comments-form');\n  }\n  // Make sure we have the component wrapper\n  if ($cpCommentsForm.tagName.toLowerCase() !== 'cp-comments-form') {\n    console.warn('focusCommentFormTextArea: Wasn\\'t able to find component wrapper to focus text area.');\n    return false;\n  }\n  const $textArea = $cpCommentsForm.shadowRoot.querySelector('textarea');\n  if ($textArea) {\n    // Focus the text area and don't add another reply form.\n    $textArea.focus();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Creates a new CpComments element.\n * @class\n */\nclass CpComments extends PFElement {\n  static get version() {\n    return \"1.0.64\";\n  }\n\n  get html() {\n    return `<style>@charset \"UTF-8\";*,:after,:before{box-sizing:border-box}:focus,:host:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 2px 3px #0066cc55}:host{display:block;font-size:1.125rem;line-height:1.6667;font-family:RedHatText,'Red Hat Text','Helvetica Neue',Arial,sans-serif;color:#252525;-moz-tab-size:4;-o-tab-size:4;tab-size:4}:host([hidden]),[hidden][hidden][hidden]{display:none}a{color:#06c;text-decoration:underline}a:focus,a:hover{color:#036;text-decoration:none}a:visited{color:#036}button{cursor:pointer}input,select,textarea{margin:0;font:inherit;color:inherit}.sr-only[class],.visually-hidden[class]{position:absolute;overflow:hidden;clip:rect(0,0,0,0);width:1px;height:1px;padding:0;border:0;white-space:nowrap}.lds-ring{position:relative;display:block;width:80px;height:80px;margin:0 auto}.best-comments .lds-ring{margin-top:30px;margin-bottom:30px}.lds-ring div{position:absolute;display:block;width:64px;height:64px;margin:8px;border:8px solid #bbb;border:8px solid #bbb;border:8px solid var(--cp-comments__loader__color,#bbb);border-color:#bbb transparent transparent transparent;border-color:#bbb transparent transparent transparent;border-color:var(--cp-comments__loader__color,#bbb) transparent transparent transparent;border-radius:50%;animation:1.2s cubic-bezier(.5,0,.5,1) infinite lds-ring}.lds-ring div:first-child{animation-delay:-.45s}.lds-ring div:nth-child(2){animation-delay:-.3s}.lds-ring div:nth-child(3){animation-delay:-.15s}@keyframes lds-ring{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}.pager{font-size:.875rem;line-height:1.5}.pager button,.pager input{font:inherit}.pager__list{display:flex;flex-wrap:wrap;gap:.57143em;justify-content:center;list-style:none}.pager__link{position:relative;width:1.71429em;height:1.71429em;border:0;color:#6a6e73;text-indent:-9999em;background:0 0;-webkit-appearance:none;-moz-appearance:none;appearance:none}.pager__link:focus,.pager__link:hover{color:#151515}.pager__link:disabled{color:#d2d2d2;cursor:default}.pager__link:before{content:''}.pager__link:after,.pager__link:before{position:absolute;top:50%;left:50%;display:block;width:1em;height:1em;border:clamp(2px,.42857em,9999em) solid transparent}.pager__link--first:after,.pager__link--first:before,.pager__link--previous:before{border-top-color:currentColor;border-right:0;border-bottom:0;border-left-color:currentColor;transform:translateY(-50%) scale(.5) translate(-.85714em) rotate(-45deg)}.pager__link--first:before{transform:translateY(-50%) scale(.5) translateX(-.35714em) rotate(-45deg)}.pager__link--first:after{content:'';transform:translateY(-50%) scale(.5) translateX(-1.21429em) rotate(-45deg)}.pager__link--last:after,.pager__link--last:before,.pager__link--next:before{border-top:0;border-right-color:currentColor;border-bottom-color:currentColor;border-left:0;transform:translateY(-50%) scale(.5) translate(-1.14286em) rotate(-45deg)}.pager__link--last:before{transform:translateY(-50%) scale(.5) translateX(-.64286em) rotate(-45deg)}.pager__link--last:after{content:'';transform:translateY(-50%) scale(.5) translateX(-1.5em) rotate(-45deg)}[id=pager__current-page]{border:1px solid #f0f0f0;text-align:center}[id=pager__current-page]:focus{border-color:#06c}.status-messages-area{position:sticky;top:8px;z-index:10;margin:0 0 1em}.status-message{position:relative;margin-bottom:8px;padding:1.25em;padding-right:3.75em;padding-left:3em;border-top:2px solid #009596;border-top:2px solid #009596;border-top:2px solid var(--status-message__accent,#009596);background:#fff;box-shadow:rgba(3,3,3,.16) 0 .5rem 1rem 0,rgba(3,3,3,.08) 0 0 .375rem 0}.status-message__headline{position:relative;margin:0 0 .3em -1.75em;padding:0 0 0 1.75em;line-height:1.5;font:inherit;color:#003737;color:#003737;color:var(--status-message__accent--text,#003737);font-weight:700}.status-message__headline:before{content:'';position:absolute;top:0;left:0;display:block;width:1.25em;height:1.25em;margin-right:.5em;background:#009596;background:#009596;background:var(--status-message__accent,#009596);-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-default.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-default.svg);-webkit-mask-size:cover;mask-size:cover}.status-message--success{--status-message__accent:#3e8635;--status-message__accent--text:#1e4f18}.status-message--success .status-message__headline:before{-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/patternfly-icons/fa-check-circle.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/patternfly-icons/fa-check-circle.svg)}.status-message--warning{--status-message__accent:#f0ab00;--status-message__accent--text:#795600}.status-message--warning .status-message__headline:before{-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-warning.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-warning.svg)}.status-message--error{--status-message__accent:#c9190b;--status-message__accent--text:#a30000}.status-message--error .status-message__headline:before{-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-danger.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-danger.svg)}.status-message--information{--status-message__accent:#2b9af3;--status-message__accent--text:#002952}.status-message--information .status-message__headline:before{-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-info.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-alert-info.svg)}.status-message__close{position:absolute;top:.75em;right:.75em;overflow:hidden;width:2.5em;height:2.5em;border:0;text-indent:-9999em;background:0 0}.status-message__close:before{content:'';position:absolute;top:0;right:0;bottom:0;left:0;display:block;background:#888;-webkit-mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-close.svg);mask-image:url(//access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-close.svg);-webkit-mask-size:75% auto;mask-size:75% auto;-webkit-mask-position:center center;mask-position:center center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-appearance:none;-moz-appearance:none;appearance:none}.best-comments__title{position:absolute;top:-.8125em;left:0;z-index:10;display:block;width:-moz-fit-content;width:fit-content;margin:0 0 0 .625rem;padding:0 .5rem;font-size:1rem;color:#3f9c35;font-weight:700;background:#fff}:host(.cp-comments-comment--in-best-comments-wrapper) .best-comments__title{display:none}.best-comments-icon{text-indent:0}.best-comments-icon:before{content:'\u2605';display:inline-block;margin-right:.25em;padding:.25em;border-radius:50%;line-height:1;color:#fff;font-weight:400;font-style:normal;font-variant:normal;text-decoration:inherit;text-transform:none!important;background:#3f9c35;transform:scale(.8);text-rendering:optimizeLegibility;font-smoothing:antialiased}:host(.cp-comments--loading-new-page) .comments__list{min-height:100px;opacity:.8}:host(.cp-comments--loading-new-page) .comments__list-item--new-page{position:sticky;bottom:calc(50vh - 40px);z-index:9999;margin:20px auto}.comments{position:relative;z-index:0}.login-button{display:inline-flex;align-items:center;padding:.5em 1em;border:0;border-radius:3px;font-size:1rem;font-weight:700;white-space:nowrap;text-decoration:none;background:#004080}.login-button,.login-button[class]{color:#fff}.login-button:focus,.login-button:hover{color:#fff;background:#06c}.login-button:before{content:'';display:block;width:1em;height:1em;margin-right:.75em;background:currentColor;-webkit-mask-image:url(/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-contact.svg);mask-image:url(/webassets/avalon/j/lib/rh-iconfont-svgs/web-icon-contact.svg);-webkit-mask-size:contain;mask-size:contain}.comments__list{margin:0;padding:0}.comments__list-item,.comments__list>li{margin:1rem 0 0;padding:0;list-style:none}.comments__list-item:empty,.comments__list>li:empty{display:none}@media (min-width:768px){.comments__list-item .comments__list-item{margin-left:2rem}}@media (min-width:1200px){.comments__list-item .comments__list-item{margin-left:6.75rem}}@media (min-width:768px){.comments__list-item .comments__list-item .comments__list-item .comments__list-item{margin-left:0}}.best-comments{position:relative;margin:2rem 0 3rem;border:1px solid #3f9c35}.best-comments[data-count='0']{display:none}.cp-comments-comment--private{border-top:3px solid #a00}@media (min-width:768px){.cp-comments-comment--private{border:0;box-shadow:inset 0 0 0 2px #a00}}.cp-comments-comment--private .cp-comments-comment--private{box-shadow:none}[id=form-submit-placeholder]{margin:30px auto}.loading-best-comment--error{margin:0 1rem}\n/*# sourceMappingURL=cp-comments.min.css.map */\n</style><a\n  href=\"https://access.redhat.com/login?redirectTo=${location.href}\"\n  hidden class=\"login-button\"\n>\n  Log in to comment\n</a>\n<div class=\"status-messages-area\" id=\"status-messages--global\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n<div id=\"comments\" class=\"comments\">\n  <ol class=\"comments__list\">\n  </ol>\n</div>`;\n  }\n  static get translations() {\n    return {\n      en: {\n        bestResponse: \"Best Response\",\n        unmarkAsBestResponse: \"Unmark as best response\",\n        markAsBestResponse: \"Mark as best response\",\n        warningRepliesDeleted: \"Deleting will also remove all replies to this comment.\",\n        confirmToDelete: \"Are you sure you want to delete this comment?\",\n        warningNoUndo: \"This action cannot be undone\",\n        deleteComment: \"Delete comment\",\n        cancel: \"Cancel\",\n        uppercaseComments: \"Comments\",\n        through: \"through\",\n        outOf: \"out of\",\n        lowercaseComments: \"comments\",\n        first: \"First page of comments\",\n        next: \"Next page of comments\",\n        previous: \"Previous page of comments\",\n        last: \"Last page of comments\",\n        page: \"Page\",\n        of: \"of\",\n        pages: \"pages\",\n        error: \"Error\",\n        viewUserProfile: \"View user profile\",\n        privateComment: \"Private Comment\",\n        reply: \"Reply\",\n        replyPrivately: \"Reply privately\",\n        delete: \"Delete\",\n        formattingHelp: \"Formatting Help\",\n        sendNotifications: \"Send notifications to content followers\",\n        markAsPrivate: \"Mark comment as private\",\n        submit: \"Submit\",\n        edit: \"Edit\",\n        points: \"points\",\n        loginLink: \"Login to see comments\",\n        errorLoadingTitle: \"Error loading comments\",\n        authIssueMessage: \"Unable to get login credentials.\",\n        unknownError: \"Encountered an unknown error.\",\n        markAsBestResponseErrorTitle: \"Encountered an error marking as best response\",\n        deleteErrorTitle: \"Encountered an error deleting comment\",\n        deleteSuccessTitle: \"Comment deleted succesfully\",\n        postingErrorTitle: \"Encountered an error posting the comment\",\n        reloadPageToTest: \"Please reload the page to see if comment was posted\",\n        editingErrorTitle: \"Encountered an error editing the comment\",\n        submittingError: \"Encountered an error submitting form\",\n        postSuccess: \"Comment posted successfully\",\n        markAsBestSuccess: \"Marked as best response successfully\",\n        removeAsBestSuccess: \"Removed as best response successfully\",\n        closeNotification: \"Close notification\",\n        loadingComments: 'Loading comments',\n        loadedComments: 'Comments loaded successfully',\n        paginationDescription: 'Pagination',\n      },\n      ja: {\n        bestResponse: \"\u6700\u3082\u9069\u5207\u306A\u56DE\u7B54\",\n        unmarkAsBestResponse: \"\u6700\u3082\u9069\u5207\u306A\u56DE\u7B54\u3068\u306E\u30DE\u30FC\u30AF\u3092\u89E3\u9664\u3059\u308B\",\n        markAsBestResponse: \"\u6700\u3082\u9069\u5207\u306A\u56DE\u7B54\u3068\u30DE\u30FC\u30AF\u3059\u308B\",\n        warningRepliesDeleted: \"\u524A\u9664\u3059\u308B\u3068\u3001\u3053\u306E\u30B3\u30E1\u30F3\u30C8\u306B\u5BFE\u3059\u308B\u8FD4\u4FE1\u3082\u3059\u3079\u3066\u524A\u9664\u3055\u308C\u307E\u3059\u3002\",\n        confirmToDelete: \"\u3053\u306E\u30B3\u30E1\u30F3\u30C8\u3092\u672C\u5F53\u306B\u524A\u9664\u3057\u3066\u3082\u3088\u308D\u3057\u3044\u3067\u3059\u304B\uFF1F\",\n        warningNoUndo: \"\u3053\u306E\u30A2\u30AF\u30B7\u30E7\u30F3\u306F\u5143\u306B\u623B\u305B\u307E\u305B\u3093\u3002\",\n        deleteComment: \"\u30B3\u30E1\u30F3\u30C8\u306E\u524A\u9664\",\n        cancel: \"\u30AD\u30E3\u30F3\u30BB\u30EB\",\n        uppercaseComments: \"\u30B3\u30E1\u30F3\u30C8\",\n        through: \"\u7D4C\u7531\",\n        outOf: \"/\",\n        lowercaseComments: \"\u30B3\u30E1\u30F3\u30C8\",\n        first: \"\u6700\u521D\",\n        next: \"\u6B21\u3078\",\n        previous: \"\u524D\u3078\",\n        last: \"\u6700\u5F8C\",\n        page: \"\u30DA\u30FC\u30B8\",\n        of: \"/\",\n        pages: \"\u30DA\u30FC\u30B8\",\n        error: \"\u30A8\u30E9\u30FC\",\n        viewUserProfile: \"\u30E6\u30FC\u30B6\u30FC\u30D7\u30ED\u30D5\u30A1\u30A4\u30EB\u306E\u8868\u793A\",\n        privateComment: \"\u975E\u516C\u958B\u306E\u30B3\u30E1\u30F3\u30C8\",\n        reply: \"\u8FD4\u4FE1\",\n        replyPrivately: \"\u8FD4\u4FE1\u3092\u975E\u516C\u958B\u306B\u3059\u308B\",\n        delete: \"\u524A\u9664\",\n        formattingHelp: \"\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8\u306E\u30D8\u30EB\u30D7\",\n        sendNotifications: \"\u30B3\u30F3\u30C6\u30F3\u30C4\u306E\u30D5\u30A9\u30ED\u30EF\u30FC\u306B\u901A\u77E5\u3092\u9001\u4FE1\u3059\u308B\",\n        markAsPrivate: \"\u30B3\u30E1\u30F3\u30C8\u3092\u975E\u516C\u958B\u3068\u3057\u3066\u30DE\u30FC\u30AF\u3059\u308B\",\n        submit: \"\u9001\u4FE1\",\n        edit: \"\u7DE8\u96C6\",\n        points: \"points\",\n        loginLink: \"\u30ED\u30B0\u30A4\u30F3\u3057\u3066\u30B3\u30E1\u30F3\u30C8\u3092\u8868\u793A\",\n        errorLoadingTitle: \"\u30B3\u30E1\u30F3\u30C8\u306E\u8AAD\u307F\u8FBC\u307F\u30A8\u30E9\u30FC\",\n        authIssueMessage: \"\u30ED\u30B0\u30A4\u30F3\u8A8D\u8A3C\u60C5\u5831\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3002\",\n        unknownError: \"\u4E0D\u660E\u306A\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\",\n        markAsBestResponseErrorTitle: \"\u6700\u9069\u306A\u56DE\u7B54\u3068\u30DE\u30FC\u30AF\u3059\u308B\u3068\u304D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\",\n        deleteErrorTitle: \"\u30B3\u30E1\u30F3\u30C8\u524A\u9664\u6642\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\",\n        deleteSuccessTitle: \"\u30B3\u30E1\u30F3\u30C8\u304C\u6B63\u5E38\u306B\u524A\u9664\u3055\u308C\u307E\u3057\u305F\",\n        postingErrorTitle: \"\u30B3\u30E1\u30F3\u30C8\u306E\u63B2\u8F09\u6642\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\",\n        reloadPageToTest: \"\u30DA\u30FC\u30B8\u3092\u518D\u8AAD\u307F\u8FBC\u307F\u3057\u3066\u64CD\u4F5C\u304C\u6B63\u5E38\u306B\u5B9F\u884C\u3055\u308C\u305F\u304B\u3069\u3046\u304B\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002\",\n        editingErrorTitle: \"\u30B3\u30E1\u30F3\u30C8\u306E\u7DE8\u96C6\u6642\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\",\n        submittingError: \"\u30D5\u30A9\u30FC\u30E0\u306E\u9001\u4FE1\u6642\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\",\n        postSuccess: \"\u30B3\u30E1\u30F3\u30C8\u3092\u6B63\u5E38\u306B\u63B2\u8F09\u3055\u308C\u307E\u3057\u305F\",\n        markAsBestSuccess: \"\u6B63\u5E38\u306B\u6700\u9069\u306A\u56DE\u7B54\u3068\u30DE\u30FC\u30AF\u3057\u307E\u3057\u305F\",\n        removeAsBestSuccess: \"\u6700\u9069\u306A\u56DE\u7B54\u3068\u30DE\u30FC\u30AF\u4ED8\u3051\u3092\u6B63\u5E38\u306B\u524A\u9664\u3057\u307E\u3057\u305F\",\n        close: \"\u901A\u77E5\u753B\u9762\u3092\u9589\u3058\u308B\",\n        loadingComments: '\u30B3\u30E1\u30F3\u30C8\u306E\u8AAD\u307F\u8FBC\u307F\u4E2D',\n        loadedComments: '\u30B3\u30E1\u30F3\u30C8\u304C\u6B63\u5E38\u306B\u8AAD\u307F\u8FBC\u307E\u308C\u307E\u3057\u305F',\n        paginationDescription: '\u30DA\u30FC\u30B8\u30CD\u30FC\u30B7\u30E7\u30F3',\n      },\n      ko: {\n        bestResponse: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5\",\n        unmarkAsBestResponse: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5 \uD45C\uC2DC \uD574\uC81C\",\n        markAsBestResponse: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5\uC73C\uB85C \uD45C\uC2DC\",\n        warningRepliesDeleted: \"\uC0AD\uC81C\uD558\uBA74 \uC774 \uB313\uAE00\uC5D0 \uB300\uD55C \uBAA8\uB4E0 \uB2F5\uAE00\uB3C4 \uC0AD\uC81C\uB429\uB2C8\uB2E4.\",\n        confirmToDelete: \"\uC774 \uB313\uAE00\uC744 \uC0AD\uC81C\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?\",\n        warningNoUndo: \"\uC774 \uC791\uC5C5\uC744 \uC2E4\uD589 \uCDE8\uC18C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4 \",\n        deleteComment: \"\uB313\uAE00 \uC0AD\uC81C\",\n        cancel: \"\uCDE8\uC18C\",\n        uppercaseComments: \"\uB313\uAE00\",\n        through: \"\uD1B5\uACFC\",\n        outOf: \"/\",\n        lowercaseComments: \"\uB313\uAE00\",\n        first: \"\uCC98\uC74C\",\n        next: \"\uB2E4\uC74C\",\n        previous: \"\uC774\uC804\",\n        last: \"\uB9C8\uC9C0\uB9C9\",\n        page: \"\uD398\uC774\uC9C0\",\n        of: \"/\",\n        pages: \"\uD398\uC774\uC9C0\",\n        error: \"\uC624\uB958\",\n        viewUserProfile: \"\uC0AC\uC6A9\uC790 \uD504\uB85C\uD544 \uBCF4\uAE30\",\n        privateComment: \"\uBE44\uACF5\uAC1C \uB313\uAE00\",\n        reply: \"\uD68C\uC2E0\",\n        replyPrivately: \"\uBE44\uACF5\uAC1C \uD68C\uC2E0\",\n        delete: \"\uC0AD\uC81C\",\n        formattingHelp: \"\uD615\uC2DD \uB3C4\uC6C0\uB9D0\",\n        sendNotifications: \"\uCF58\uD150\uCE20 \uD314\uB85C\uC6CC\uC5D0\uAC8C \uC54C\uB9BC \uBCF4\uB0B4\uAE30\",\n        markAsPrivate: \"\uB313\uAE00\uC744 \uBE44\uACF5\uAC1C\uB85C \uD45C\uC2DC\",\n        submit: \"\uC81C\uCD9C\",\n        edit: \"\uD3B8\uC9D1\",\n        points: \"points\",\n        loginLink: \"\uB85C\uADF8\uC778\uD558\uC5EC \uB313\uAE00 \uBCF4\uAE30\",\n        errorLoadingTitle: \"\uB313\uAE00 \uB85C\uB4DC \uC911 \uC624\uB958 \uBC1C\uC0DD\",\n        authIssueMessage: \"\uB85C\uADF8\uC778 \uC815\uBCF4\uB97C \uAC00\uC838\uC62C \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.\",\n        unknownError: \"\uC54C \uC218 \uC5C6\uB294 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.\",\n        markAsBestResponseErrorTitle: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5\uC73C\uB85C \uD45C\uC2DC\uD558\uB294 \uC911 \uC624\uB958 \uBC1C\uC0DD\",\n        deleteErrorTitle: \"\uB313\uAE00 \uC0AD\uC81C \uC911 \uC624\uB958 \uBC1C\uC0DD\",\n        deleteSuccessTitle: \"\uB313\uAE00\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4\",\n        postingErrorTitle: \"\uB313\uAE00\uC744 \uAC8C\uC2DC\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4\",\n        reloadPageToTest: \"\uD398\uC774\uC9C0\uB97C \uB2E4\uC2DC \uB85C\uB4DC\uD558\uC5EC \uC791\uC5C5\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC218\uD589\uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD569\uB2C8\uB2E4.\",\n        editingErrorTitle: \"\uB313\uAE00\uC744 \uD3B8\uC9D1\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4\",\n        submittingError: \"\uC591\uC2DD \uC81C\uCD9C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4\",\n        postSuccess: \"\uB313\uAE00\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uAC8C\uC2DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4\",\n        markAsBestSuccess: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5\uC73C\uB85C \uD45C\uC2DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4\",\n        removeAsBestSuccess: \"\uCD5C\uC0C1\uC758 \uC751\uB2F5\uC5D0\uC11C \uC81C\uAC70\uB418\uC5C8\uC2B5\uB2C8\uB2E4\",\n        close: \"\uC54C\uB9BC \uB2EB\uAE30\",\n        loadingComments: '\uB313\uAE00 \uB85C\uB4DC \uC911',\n        loadedComments: '\uB313\uAE00\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uB85C\uB4DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4',\n        paginationDescription: '\uD398\uC774\uC9C0 \uAD6C\uBD84',\n      },\n      ['zh_CN']: {\n        bestResponse: \"\u6700\u4F73\u54CD\u5E94\",\n        unmarkAsBestResponse: \"\u53D6\u6D88\u6807\u8BB0\u4E3A\u6700\u4F73\u54CD\u5E94\",\n        markAsBestResponse: \"\u6807\u8BB0\u4E3A\u6700\u4F73\u54CD\u5E94\",\n        warningRepliesDeleted: \"\u5220\u9664\u4F1A\u5220\u9664\u6240\u6709\u5BF9\u8FD9\u4E2A\u8BC4\u8BBA\u7684\u56DE\u590D\u3002\",\n        confirmToDelete: \"\u60A8\u786E\u5B9A\u8981\u5220\u9664\u8FD9\u4E2A\u8BC4\u8BBA\u5417\uFF1F\",\n        warningNoUndo: \"\u8FD9\u4E2A\u64CD\u4F5C\u4E0D\u80FD\u590D\u539F\",\n        deleteComment: \"\u5220\u9664\u8BC4\u8BBA\",\n        cancel: \"\u53D6\u6D88\",\n        uppercaseComments: \"\u8BC4\u8BBA\",\n        through: \"\u901A\u8FC7\",\n        outOf: \"/\",\n        lowercaseComments: \"\u8BC4\u8BBA\",\n        first: \"\u7B2C\u4E00\",\n        next: \"\u4E0B\u4E00\",\n        previous: \"\u524D\u4E00\",\n        last: \"\u6700\u540E\",\n        page: \"\u9875\",\n        of: \"/\",\n        pages: \"\u9875\",\n        error: \"\u9519\u8BEF\",\n        viewUserProfile: \"\u67E5\u770B\u7528\u6237\u6863\u6848\",\n        privateComment: \"\u79C1\u6709\u8BC4\u8BBA\",\n        reply: \"\u56DE\u590D\",\n        replyPrivately: \"\u79C1\u6709\u56DE\u590D\",\n        delete: \"\u5220\u9664\",\n        formattingHelp: \"\u683C\u5F0F\u5E2E\u52A9\",\n        sendNotifications: \"\u5411\u5185\u5BB9\u5173\u6CE8\u8005\u53D1\u751F\u901A\u77E5\",\n        markAsPrivate: \"\u5C06\u8BC4\u8BBA\u6807\u8BB0\u4E3A\u79C1\u6709\",\n        submit: \"\u63D0\u4EA4\",\n        edit: \"\u7F16\u8F91\",\n        points: \"points\",\n        loginLink: \"\u767B\u5F55\u6765\u67E5\u770B\u8BC4\u8BBA\",\n        errorLoadingTitle: \"\u52A0\u8F7D\u6CE8\u91CA\u65F6\u51FA\u9519\",\n        authIssueMessage: \"\u65E0\u6CD5\u83B7\u53D6\u767B\u5F55\u51ED\u636E\u3002\",\n        unknownError: \"\u9047\u5230\u4E00\u4E2A\u672A\u77E5\u9519\u8BEF\u3002\",\n        markAsBestResponseErrorTitle: \"\u6807\u8BB0\u4E3A\u6700\u4F73\u54CD\u5E94\u65F6\u9047\u5230\u4E00\u4E2A\u9519\u8BEF\",\n        deleteErrorTitle: \"\u5220\u9664\u8BC4\u8BBA\u65F6\u9047\u5230\u4E00\u4E2A\u9519\u8BEF\",\n        deleteSuccessTitle: \"\u6210\u529F\u5220\u9664\u8BC4\u8BBA\",\n        postingErrorTitle: \"\u53D1\u5E03\u8BC4\u8BBA\u65F6\u9047\u5230\u4E00\u4E2A\u9519\u8BEF\",\n        reloadPageToTest: \"\u8BF7\u91CD\u65B0\u52A0\u8F7D\u9875\u9762\u4EE5\u67E5\u770B\u64CD\u4F5C\u662F\u5426\u6210\u529F\u3002\",\n        editingErrorTitle: \"\u7F16\u8F91\u8BC4\u8BBA\u65F6\u9047\u5230\u4E00\u4E2A\u9519\u8BEF\",\n        submittingError: \"\u63D0\u4EA4\u8868\u5355\u65F6\u9047\u5230\u4E00\u4E2A\u9519\u8BEF\",\n        postSuccess: \"\u6210\u529F\u53D1\u5E03\u8BC4\u8BBA\",\n        markAsBestSuccess: \"\u6210\u529F\u6807\u8BB0\u4E3A\u6700\u4F73\u54CD\u5E94\",\n        removeAsBestSuccess: \"\u4F5C\u4E3A\u6700\u4F73\u54CD\u5E94\u6210\u529F\u5220\u9664\",\n        close: \"\u5173\u95ED\u901A\u77E5\",\n        loadingComments: '\u6B63\u5728\u52A0\u8F7D\u8BC4\u8BBA',\n        loadedComments: '\u6210\u529F\u52A0\u8F7D\u8BC4\u8BBA',\n        paginationDescription: '\u5206\u9875',\n      },\n      fr: {\n        bestResponse: \"Meilleure r\u00E9ponse\",\n        unmarkAsBestResponse: \"D\u00E9cocher comme meilleure r\u00E9ponse\",\n        markAsBestResponse: \"Cocher comme meilleure r\u00E9ponse\",\n        warningRepliesDeleted: \"En supprimant, vous effacez toutes les r\u00E9ponses \u00E0 ce commentaire.\",\n        confirmToDelete: \"\u00CAtes-vous certain(e) de vouloir supprimer ce commentaire?\",\n        warningNoUndo: \"Cette action ne peut pas \u00EAtre annul\u00E9e\",\n        deleteComment: \"Supprimer le commentaire\",\n        cancel: \"Annuler\",\n        uppercaseComments: \"Commentaires\",\n        through: \"via\",\n        outOf: \"parmi\",\n        lowercaseComments: \"commentaires\",\n        first: \"premier\",\n        next: \"prochain\",\n        previous: \"pr\u00E9c\u00E9dent\",\n        last: \"dernier\",\n        page: \"Page\",\n        of: \"de\",\n        pages: \"pages\",\n        error: \"erreur\",\n        viewUserProfile: \"Afficher le profil utilisateur\",\n        privateComment: \"Commentaire Priv\u00E9\",\n        reply: \"R\u00E9pondre\",\n        replyPrivately: \"R\u00E9pondre \u00E0 titre priv\u00E9\",\n        delete: \"Supprimer\",\n        formattingHelp: \"Assistance Formatage\",\n        sendNotifications: \"Envoyer des notifications aux suiveurs de contenu\",\n        markAsPrivate: \"Indiquer Priv\u00E9\",\n        submit: \"Soumettre\",\n        edit: \"Modifier\",\n        points: \"points\",\n        loginLink: \"Se connecter pour voir les commentaires\",\n        errorLoadingTitle: \"Erreur de chargement des commentaires\",\n        authIssueMessage: \"Impossible d'obtenir les identifiants de connexion.\",\n        unknownError: \"Une erreur inconnue est survenue.\",\n        markAsBestResponseErrorTitle: \"Une erreur s'est produite lors du marquage de la meilleure r\u00E9ponse.\",\n        deleteErrorTitle: \"Une erreur s\u2019est produite lors de la suppression du commentaire.\",\n        deleteSuccessTitle: \"Commentaire supprim\u00E9.\",\n        postingErrorTitle: \"Une erreur s'est produite lors de la publication du commentaire.\",\n        reloadPageToTest: \"Veuillez recharger la page pour v\u00E9rifier si l'op\u00E9ration a r\u00E9ussi.\",\n        editingErrorTitle: \"Une erreur est survenue lors de la modification du commentaire.\",\n        submittingError: \"Une erreur s'est produite lors de la soumission du formulaire.\",\n        postSuccess: \"Le commentaire a \u00E9t\u00E9 publi\u00E9.\",\n        markAsBestSuccess: \"Marquage de la meilleure r\u00E9ponse r\u00E9ussi.\",\n        removeAsBestSuccess: \"Suppression du marquage comme meilleure r\u00E9ponse r\u00E9ussi.\",\n        close: \"Fermer la notification.\",\n        loadingComments: 'Chargement des commentaires',\n        loadedComments: 'Les commentaires ont \u00E9t\u00E9 t\u00E9l\u00E9charg\u00E9s.',\n        paginationDescription: 'Pagination',\n      }\n    };\n  }\n\n  // PFE 1.x replacement for JSON Schema, can be left empty\n  static get properties() {\n    return {};\n  }\n\n  // PFE 1.x replacement for JSON Schema, can be left empty\n  static get slots() {\n    return {};\n  }\n\n  /**\n   * Represents the CpComments tag.\n   *\n   * @constructor\n   */\n  constructor() {\n    super(CpComments, { type: CpComments.PfeType });\n\n    this._config = {};\n    this._commentData = {};\n    this.initialized = false;\n\n    // Initialize element pointers that don't exist yet\n    this.bestCommentsWrapper = null;\n    this.pagerWrapper = null;\n    this.pagerElements = {};\n\n    // Set commonly used element pointers that are in shadow DOM\n    this.outerWrapper = this.shadowRoot.querySelector('#comments');\n    this.commentsWrapper = this.shadowRoot.querySelector('.comments__list');\n    this.loginLink = this.shadowRoot.querySelector('.login-button');\n    this.globalStatusMessagesWrapper = this.shadowRoot.getElementById('status-messages--global');\n\n    this.hasPostPermission = false;\n    this.hasModerateBestCommentPermission = false;\n\n    this.commentCount = 0;\n\n    this._lang = 'en';\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (portal && portal.lang) {\n      this.lang = portal.lang;\n\n      // Translated strings from cp-comments.html don't have a proper language set and need to be updated\n      if (this.lang !== 'en') {\n        const $statusMessageAreaHeadline = this.shadowRoot.getElementById('status-messages-area__headline');\n        if ($statusMessageAreaHeadline && this.lang in CpComments.translations[this.lang] && CpComments.translations[this.lang].statusMessagesHeadline) {\n          $statusMessageAreaHeadline.innerText = CpComments.translations[this.lang].statusMessagesHeadline;\n        }\n      }\n    }\n\n    // If the config property was set before connected, call the setter and get this party started.\n    this._upgradeProperty(\"config\");\n\n    // Send a request for configuration event.\n    // This event is caught by injected_comments.js in DXP Commenting Platform\n    this.emitEvent(\"pfeconfig-query\");\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value in CpComments.translations ? value : 'en';\n  }\n\n  // Declare the type of this component\n  static get PfeType() {\n    return PFElement.PfeTypes.Container;\n  }\n\n  /**\n   * Get debugging status.\n   */\n  get debug() {\n    return this._debug || false;\n  }\n\n  /**\n   * Set debugging status.\n   */\n  set debug(value) {\n    this._debug = value;\n  }\n\n  /**\n   * Getter for the tag name.\n   *\n   * @static\n   * @returns {string} - Name of the element.\n   */\n  static get tag() {\n    return \"cp-comments\";\n  }\n\n  /**\n   * Getter for config\n   *\n   * @returns {object} - Configuration object.\n   */\n  get config() {\n    return this._config || null;\n  }\n\n  /**\n   * Setter for config object.\n   *\n   * @param value {object} - Configuration object.\n   */\n  set config(value) {\n    if (!this.isEmpty(this._config)) {\n      if (this.debug) console.log(\"Already configured.\");\n      return;\n    }\n\n    // Keep track of the config data.\n    this._config = value;\n\n    // Set language based on config\n    if (value.cpComments && value.cpComments.lang) {\n      this.lang = value.cpComments.lang;\n    }\n\n    // If we have provided data, use it.\n    if (value.cpComments && value.cpComments.data) {\n      if (this.debug) console.log(\"Setting explicit config\");\n      this.parseCommentData(value.cpComments.data);\n    }\n    else {\n      // Request data for the component.\n\n      // @todo Some method of starting at a page number other than 0\n      const initializeComments = () => this.getPageOfComments(0);\n      // Initialize the session and pass in the intializeComments callback.\n      this.getSession(true, initializeComments);\n    }\n  }\n\n  /**\n   * Getter for templateUrl.\n   *\n   * @returns {string} - Path to the template.\n   */\n  static get templateUrl() {\n    return \"cp-comments.html\";\n  }\n\n  /**\n   * Getter for styleUrl.\n   * @returns {string} - Path to the styles.\n   */\n  static get styleUrl() {\n    return \"cp-comments.css\";\n  }\n\n  /**\n   * Retrieve the cp-chrome or primer session.\n   */\n  getSession(onInit = false, callback = null) {\n    // cp-chrome.\n    if (portal && portal.session) {\n      if (onInit && callback) {\n        window.portal.session.onInit(callback);\n      }\n      return portal.session;\n    }\n    else if (typeof chrometwo_require !== 'undefined') {\n      chrometwo_require(['session'], (session) => {\n        session.onInit(callback);\n      });\n      if (portal && portal.session) {\n        return portal.session;\n      }\n    }\n    // Primer.\n    else if (portal && portal.primer) {\n      if (onInit && callback) {\n        portal.primer.onReady().then((primer) => {\n          primer.session.onInit(callback);\n        });\n      }\n\n      if (portal.primer.session) {\n        return portal.primer.session;\n      }\n    }\n\n    // Fallback.\n    return {};\n  }\n\n  /**\n   * Utility function to get encoded JWT\n   * @param {boolean} useExistingToken\n   *   [optional] Use existing JWT if true (default), or force a refresh if\n   *   false.\n   * @returns Encoded JWT or false\n   */\n  getEncodedJwt(useExistingToken = true) {\n    // In most cases, we'll want to return the existing token if present.\n    if (this.userJwt && useExistingToken) {\n      return this.userJwt;\n    }\n    // Return the token from the session, if possible.\n    const session = this.getSession(false);\n    if (session.getEncodedToken) {\n      const token = session.getEncodedToken();\n      if (token) {\n        this.userJwt = token;\n        return token;\n      }\n    }\n    // If the auth is cookie based, get the token from the cookie.\n    // Otherwise try getting the token from cookies, which should always work, but is more processing\n    if (this.config && (this.config.cpComments.auth.type === 'cookie')) {\n      const name = this.config.cpComments.auth.name;\n      const cookieMatches = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n      if (cookieMatches && cookieMatches.length) {\n        this.userJwt = cookieMatches.pop();\n        return this.userJwt;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Utility function to get Commenting API domain\n   * @returns {string} Domain for Commenting API or empty string\n   */\n  getCommentApiDomain() {\n    if (\n      this.config\n      && this.config.cpComments\n      && this.config.cpComments.canonicalUrl\n    ) {\n      return this.config.cpComments.canonicalUrl;\n    }\n    return '';\n  }\n\n  /**\n   * Utility function that returns a loading spinner\n   * @note Original markup and styles from https://loading.io/css/\n   * @param {string} id HTML ID to add to loader\n   * @param {string} ariaLabel Assistive text\n   * @param {boolean} addAriaLiveMessage Whether to actively notify screen reader users using the ariaLabel text\n   * @returns {HTMLElement} Loader HTML as a DOM element\n   */\n  renderLoader (id, ariaLabel = 'Loading comments') {\n    const $loader = document.createElement('div');\n    $loader.classList.add('lds-ring', 'cp-comments__spinner');\n    if (ariaLabel) $loader.setAttribute('aria-label', ariaLabel);\n    if (id) $loader.id = id;\n\n    // Add required inner divs for animation\n    $loader.innerHTML = `<div></div><div></div><div></div><div></div>`;\n\n    return $loader;\n  }\n\n  /**\n   * Utility function get the API Domain, commenting path prefix, and source ID, from the config\n   * @example https://access.redhat.com/api/comments/ZGM6YzA1NjZlN2EtOTkxYy00YmNhLTk1MzctMzMwNDc0NDFjMzBj\n   * @returns {string} Domain without tailing slash (e.g. http://site.com) or empty string if it couldn't be found\n   */\n  getCommentApiBasePath() {\n    if (\n      this.config\n      && this.config.cpComments\n      && this.config.cpComments.apiPath\n      && this.config.cpComments.sourceId\n    ) {\n      return `${this.getCommentApiDomain()}${this.config.cpComments.apiPath}/${this.config.cpComments.sourceId}`;\n    }\n    else {\n      throw new Error('Couldn\\'t get API URL from config data');\n    }\n  };\n\n  /**\n   * Utility function to get default fetch options\n   * @returns {object} Default options for fetch call, including auth if available\n   */\n  getGlobalFetchOptions() {\n    // Force refresh the token to prevent the request from failing.\n    const token = this.getEncodedJwt(false);\n    const fetchOptions = {};\n    if (token) {\n      fetchOptions.headers = {\n        Authorization: `Bearer ${token}`,\n      }\n    }\n    else {\n      $parentCpComments.addStatusMessage(\n        CpComments.translations[this.lang].errorLoadingTitle,\n        CpComments.translations[this.lang].authIssueMessage,\n        'error',\n        {id: 'no-auth'}\n      );\n      console.warn('cp-comments.getGlobalFetchOptions: Wasn\\'t able to get auth token.');\n    }\n\n    return fetchOptions;\n  }\n\n  /**\n   * Utility function to properly get data from a response\n   * Our API has changed to have an extra data attribute\n   * @param {object} responseData API Response from Commenting Platform\n   * @returns {object} Comment data without data property, if the API is in the new format.\n   */\n  _getDataFromResponse(responseData) {\n    const hasDataProperty = typeof responseData.data === 'object';\n    // New API format, but we have an error\n    if (responseData.status && responseData.status !== 'success') {\n      // Present the error in the console for easier debugging.\n      console.error('cp-comments API reponse issue:', {responseData});\n      $parentCpComments.addStatusMessage(\n        CpComments.translations[this.lang].errorLoadingTitle,\n        CpComments.translations[this.lang].unknownError,\n        'error',\n        {id: 'unknown-error'}\n      );\n\n      // Return data if we have any, otherwise an empty object\n      return hasDataProperty ? responseData.data : {};\n    }\n    // New API format, success\n    if (hasDataProperty) return responseData.data;\n\n    // Old API format, all data is in the root of the object\n    return responseData;\n  }\n\n  /**\n   * Utility function for adding a status message\n   * @link https://www.patternfly.org/components/alert/design-guidelines/\n   * @param {string} headline Headline/entire message to the user\n   * @param {string} message Message to send to user\n   * @param {string} severity Should be default, information, warning, critical, success (per Patternfly)\n   * @param {object} options\n   *   @param {string}  options.id If the message shouldn't be repeated, add an error id that will make sure a duplicate message isn't shown\n   *   @param {boolean} options.alert If role='alert' should be present\n   *   @param {boolean} options.focus Focus the notification when it appears\n   *   @param {HTMLElement} options.focusOnClose Element to focus if notification has been closed\n   */\n  addStatusMessage(headline, message, severity = 'default', options) {\n    // Make sure options is at least an empty object\n    options = typeof options === 'object' ? options : {};\n    // Get options\n    const id = 'id' in options ? options.id : false;\n    const alert = 'alert' in options ? options.alert : false;\n    const focus = 'focus' in options ? options.focus : false;\n    const $focusOnClose = 'focusOnClose' in options ? options.focusOnClose : null;\n\n    // Validation\n    if (!headline) {\n      console.error('Missing required param headline for addStatusMessage', {headline});\n      return;\n    }\n\n    // Make sure unique error messages aren't already showing\n    if (this.globalStatusMessagesWrapper.children && id) {\n      if (this.globalStatusMessagesWrapper.querySelector(`[data-status-id=\"${id}\"]`)) return;\n    }\n\n    const $message = document.createElement('div');\n\n    // If message param is falsey, make sure it's an empty string for render\n    if (!message) message = '';\n\n    $message.innerHTML = `\n      <p class=\"status-message__headline\">${headline}</p>\n      ${message}`;\n    if (id && id.length) {\n      $message.dataset.statusId = id;\n    }\n    $message.classList.add('status-message', `status-message--${severity}`);\n\n    if (alert) {\n      $message.setAttribute('role', 'alert');\n    }\n\n    // Create close button\n    const $close = document.createElement('button');\n    $close.classList.add('status-message__close');\n    $close.innerText = CpComments.translations[this.lang].closeNotification;\n    $close.addEventListener('click', () => {\n      $message.remove();\n      if ($focusOnClose) {\n        $focusOnClose.focus();\n      }\n    });\n    $message.append($close);\n\n    this.globalStatusMessagesWrapper.append($message);\n    if (focus) {\n      $message.setAttribute('tabindex', 0);\n      $message.focus();\n    }\n  };\n\n  /**\n   * Remove a status message by ID, if it exists\n   * @param {string} id Status message id\n   */\n  removeStatusMessage(id) {\n    if (!id) {\n      console.error('Tried to remove a status message witout id.');\n      return;\n    }\n\n    const $message = this.globalStatusMessagesWrapper.querySelector(`[data-status-id=\"${id}\"]`);\n    if ($message) {\n      $message.remove();\n    }\n  }\n\n  /**\n   * Parse comment data and transform as appropriate.\n   * @param data {object} API Response data with comments and pager property\n   */\n  parseCommentData(data) {\n    data = this._getDataFromResponse(data);\n\n    // Validation\n    if (!Object.keys(data).length) {\n      console.error('cpcomments.parseCommentData: Invalid API response, received an empty object.', data);\n      this.addStatusMessage(\n        CpComments.translations[this.lang].errorLoadingTitle,\n        CpComments.translations[this.lang].unknownError,\n        'error',\n        {id: 'unknown-error'}\n      );\n      return;\n    }\n\n    const isFirstRender = !(this.commentData && Object.keys(this.commentData).length >= 0);\n    const isNewPage = this.dataset.currentPage && parseInt(this.dataset.currentPage) !== data.pager.page;\n\n    // Get pager data\n    if (data.pager) {\n      this.commentCount = data.pager.total_results;\n      this.emitEvent('cp-comments:comments-loaded', { detail: { cpComments: this, commentCount: data.pager.total_results }});\n    }\n\n    // Make sure best_comment cid's are numbers and not strings\n    if (data.best_comment && data.best_comment.length) {\n      data.best_comment = data.best_comment.map((value) => parseInt(value));\n    }\n\n    if (isFirstRender) {\n      // Instantiate commentData\n      this.commentData = data;\n\n      // Inititalize badge metadata\n      this.initializeBadges();\n     } else if (!isNewPage) {\n      // If it's an update, but not a new page\n      this.updateCommentDataAndRender(data.comments);\n    } else {\n      // It's a new page, merge in the data\n      this.updateCommentData(data.comments);\n      this.mergeObjectData(this.commentData.pager, data.pager);\n    }\n\n    if (data.requester) {\n      this.hasPostPermission = data.requester.post_comments;\n      this.hasModerateBestCommentPermission = allowBestResponse(this.config) && data.requester.moderate_comments;\n      this.commentData.requester.private_comments = allowPrivateResponse(this.config) && data.requester.private_comments;\n    }\n\n    if (data.profiles) {\n      if (!this.profiles) {\n        this.profiles = this.commentData.profiles;\n      }\n      else {\n        this.mergeObjectData(this.profiles, data.profiles);\n      }\n    }\n\n    // Sanitize profile data and add badge elements\n    this.updateProfiles();\n\n    // Don't bother showing the comment form for anonymous users.\n    if (this.hasPostPermission && !this.newCommentForm) {\n      this.newCommentForm = this.renderCommentForm(this.commentData, null, null);\n      this.outerWrapper.prepend(this.newCommentForm);\n    }\n\n    // Kick off the rendering of the comments.\n    if (isFirstRender || isNewPage) {\n      this.renderCommentsPage();\n    }\n\n    this.renderBestComments();\n\n    const hasPagerData = data.pager && typeof data.pager.page === 'number';\n    if (hasPagerData && (isFirstRender || isNewPage)) {\n      this.renderPager(data.pager);\n    }\n  }\n\n  /**\n   * Utility function to initialize badge metadata\n   */\n  initializeBadges() {\n    this.commentData.badges = Object.entries(this.commentData.badges).reduce((result, [id, badge]) => {\n      badge.shortName = shortBadgeName(badge.badge_name);\n      badge.element = addBadgeElement(id, badge.shortName, badge.badge_class);\n      result[id] = badge;\n      return result;\n    }, {});\n  }\n\n  /**\n   * Utility function to sanitize profile data with defaults and to augment it with its badge elements\n   */\n  updateProfiles() {\n    this.profiles = Object.entries(this.profiles).reduce((result, [id, profile]) => {\n      result[id] = Object.assign(profile, {\n        full_name: profile.full_name || \"Not provided\",\n        initials: profile.initials || \"--\",\n        points: profile.points || 0,\n        profileBadges: getProfileBadges(profile.badges, this.commentData.badges),\n      })\n      return result;\n    }, {});\n  }\n\n  /**\n   * Utility function to load a single comment\n   * @param {number|string} cid A valid CID, could be a number, or number as a string\n   * @param {function} callback Function to call after comment has been loaded\n   */\n  getSingleComment(cid, callback) {\n    if (!cid) {\n      console.error('Tried to get a comment without a cid');\n      return;\n    }\n\n    const fetchUrl = `${this.getCommentApiBasePath()}/${cid}`;\n    const fetchOptions = this.getGlobalFetchOptions();\n    fetchOptions.method = 'GET';\n\n    return fetch(fetchUrl, fetchOptions)\n      .then(handleFetchResponse)\n      .then((data) => {\n        callback(data);\n      });\n  }\n\n  /**\n   * Utility function to load a page of comments\n   * @param {number} newPageNumber What page to get, starts at 0\n   */\n  getPageOfComments(newPageNumber) {\n    // @todo When comments don't require auth, this should be removed.\n    if (!this.getEncodedJwt()) {\n      console.warn(`cp-comments.getPageOfComments: Auth required to see comments`);\n\n      // Get correct text in login button and show it\n      this.loginLink.innerText = CpComments.translations[this.lang].loginLink;\n\n      // Get an ideal link for the loginlink, there's a default for prod if this fails.\n      const session = this.getSession(false);\n      if (session.getLoginUrl) {\n        const loginUrl = session.getLoginUrl();\n        this.loginLink.setAttribute('href', loginUrl);\n      }\n      this.loginLink.hidden = false;\n      return;\n    }\n    else if (!this.loginLink.hidden) {\n      this.loginLink.hidden = true;\n    }\n\n    const currentPage = parseInt(this.dataset.currentPage);\n    if (newPageNumber === currentPage) {\n      console.warn('cp-comments.getPageOfComments: Already on page.', {currentPage, newPageNumber});\n      return;\n    }\n\n    const isFirstRender = !(this.commentData && Object.keys(this.commentData).length >= 0);\n\n    // Setup loading UI\n    if (isFirstRender) {\n      // Subsequent page loads have a loader added by renderCommentsPage() that has aria-live\n      // Initial load shouldn't announce itself to screen reader users, only comment pages loaded by user interaction\n      const $loadingIndicator = this.renderLoader(\n        'new-page',\n        CpComments.translations[this.lang].loadingComments,\n      );\n\n      const $loadingIndicatorWrapper = document.createElement('li');\n      $loadingIndicatorWrapper.classList.add('comments__list-item', 'comments__list-item--new-page');\n\n      // Add loading UI to the DOM\n      $loadingIndicatorWrapper.append($loadingIndicator);\n      this.commentsWrapper.append($loadingIndicatorWrapper);\n    }\n    else {\n      // Reveal the loader added to the DOM with aria-live\n      const $newPageLoader = this.shadowRoot.querySelector('#new-page');\n      if ($newPageLoader) {\n        $newPageLoader.removeAttribute('hidden');\n        $newPageLoader.focus();\n      }\n    }\n\n    // Build request for comments\n    const fetchOptions = this.getGlobalFetchOptions();\n    fetchOptions.method = 'GET';\n\n    const pagerConfig = (this.config && this.config.cpComments && this.config.cpComments.pager) || {};\n    const paginationEnabled = !!pagerConfig.enabled;\n    const pageSize = pagerConfig.size || 10;\n    const fetchUrl = `${this.getCommentApiBasePath()}${paginationEnabled ? `?page=${newPageNumber}&page_size=${pageSize}` : ''}`;\n    if (!fetchUrl) {\n      console.error('cp-comments set config: config.rest.index wasn\\'t provided, which is required to get comment data from the API.');\n      this.addStatusMessage(\n        CpComments.translations[this.lang].errorLoadingTitle,\n        CpComments.translations[this.lang].unknownError,\n        'error',\n        {id: 'unknown-error'}\n      );\n      return;\n    }\n\n    fetch(fetchUrl, fetchOptions)\n      .then(handleFetchResponse)\n      .then((data) => {\n        // Add comment data to state and rerender\n        this.parseCommentData(data);\n\n        // Update current page data attribute\n        this.dataset.currentPage = this.commentData.pager.page;\n\n        // Remove loading classes\n        this.classList.remove('cp-comments--loading', 'cp-comments--loading-new-page');\n        if (!isFirstRender) {\n          // Scroll to top of new comments\n          const $firstComment = this.commentsWrapper.querySelector('cp-comments-comment');\n          if ($firstComment) {\n            scrollToElement($firstComment, !isFirstRender);\n            // Focus first comment once page has had a chance to scroll\n            window.setTimeout(\n              () => $firstComment.focus(),\n              300\n            )\n          }\n        }\n      })\n      .catch(error => {\n        console.error(error);\n        this.addStatusMessage(\n          CpComments.translations[this.lang].errorLoadingTitle,\n          CpComments.translations[this.lang].unknownError,\n          'error',\n          {id: 'unknown-error'}\n        );\n      });\n  }\n\n  /**\n   * Utiility function to merge objects and know if data was changed\n   * @param {object} source Object to merge into\n   * @param {object} update New data that can override source\n   * @returns {boolean} True if data was changed, false if update didn't change anything\n   */\n  mergeObjectData(source, update) {\n    const updateKeys = Object.keys(update);\n    let dataHasChanged = false;\n    updateKeys.forEach((key) => {\n      if (!key in source || source[key] !== update[key]) {\n        dataHasChanged = true;\n        source[key] = update[key];\n      }\n    });\n    return dataHasChanged;\n  }\n\n  /**\n   * Utility function to update comment data, but no rendering update\n   * @param {object} comments Object of comments keyed by cid\n   */\n  updateCommentData(comments) {\n    const commentsKeys = Object.keys(comments);\n    // Iterate over provided comment data\n    commentsKeys.forEach((key) => {\n      const comment = comments[key];\n      const cid = comment.cid;\n\n      if (!this.commentData.comments[cid]) {\n        this.commentData.comments[cid] = comment;\n      }\n      else {\n        this.mergeObjectData(this.commentData.comments[cid], comment);\n      }\n    });\n  }\n\n  /**\n   * Merge in new comments\n   *\n   * @param {object} comments Comments keyed by cid\n   */\n  updateCommentDataAndRender(comments) {\n    const commentsKeys = Object.keys(comments);\n\n    /**\n     * Utility function that does the main work of this method\n     * @param {object} comment Comment data\n     */\n    const processComment = (comment) => {\n      // Make sure cid is a number\n      comment.cid = parseInt(comment.cid);\n      // In case object key wasn't cid\n      const cid = comment.cid;\n\n      // Some operations will effect child comments, process their update as well\n      if (comment.children_comments) {\n        comment.children_comments.forEach((childComment) => {\n          processComment(childComment);\n      });\n      }\n\n      // New or existing comment?\n      if (!this.commentData.comments[cid]) {\n        // It's a new comment, add its data object\n        this.commentData.comments[cid] = comment;\n\n        // Figure out what the parent element is\n        let $parentElement = this.commentsWrapper;\n        let depth = 0;\n\n        // Deal with it's parentage\n        if (comment.pid !== 0) {\n          // It's a child comment\n          if (!this.commentData.comments[comment.pid]) {\n            // @todo fetch individual comment\n            console.error('cp-comments.updateCommentDataAndRender: Couldn\\'t get parent comment data.');\n            return;\n          }\n\n          if (!this.commentData.comments[comment.pid].rendered) {\n            console.error(\n              'cp-comments.updateCommentDataAndRender: Couldn\\'t find parent comment data in commentData, see parent ID and commentData comment id\\'s:',\n              comment.pid,\n              Object.keys(this.commentData.comments)\n            );\n            return;\n          }\n\n          // Set $parentElement the parent comment's DOM element\n          $parentElement = this.commentData.comments[comment.pid].rendered;\n\n          // Try to set depth for how many comments deep it's nested\n          depth = $parentElement.dataset.depth ? parseInt($parentElement.dataset.depth) + 1 : -1;\n\n          // Update parent's children data\n          if (!this.commentData.comments[comment.pid].children) {\n            // Doesn't have children data, add it\n            this.commentData.comments[comment.pid].children = [cid];\n          }\n          else if (!this.commentData.comments[comment.pid].children && !this.commentData.comments[comment.pid].children.indexOf(cid)) {\n            // Has children data, append the new comment's id\n            this.commentData.comments[comment.pid].children.push(cid);\n          }\n        }\n\n        const $newComment = this.renderComment(comment);\n        if (depth >= 0) {\n          $newComment.dataset.depth = depth;\n        }\n\n        if ('pid' in comment && comment.pid > 0) {\n          // It's a reply\n          this.renderReply($newComment, $parentElement);\n        }\n        else {\n          // It's a top level comment\n          $parentElement.append(this.wrapCommentInLi($newComment));\n        }\n\n        // Update pointer in data\n        this.commentData.comments[cid].rendered = $newComment;\n\n        // Scroll to the new comment and add UI\n        scrollToElement($newComment);\n        $newComment.classList.add('cp-comments-comment--new');\n      }\n      else {\n        // It's an existing comment, iterate over each key in the data object\n        // and overwite the old data with the new data\n        const commentHasChanged = this.mergeObjectData(this.commentData.comments[cid], comment);\n\n        // Rerender the comment, if necessary\n        if (commentHasChanged) {\n          const $currentComment = this.commentData.comments[cid].rendered;\n          if (!$currentComment) {\n            // If this becomes an issue (I don't think it will?) we can try\n            // querying the CP Comments shadow DOM for the element by [data-cid=\"${cid}\"]\n            console.error('cp-comments.updateCommentDataAndRender: Couldn\\'t get existing comment to update UI.');\n            return;\n          }\n          const $newComment = this.renderComment(this.commentData.comments[comment.cid]);\n\n          if (cid === this.commentData.best_comment[0]) {\n            this.renderBestComments(true);\n          }\n\n          // Rerender children, for some reason moving already rendered comments breaks a lot of styles >:(\n          if ('children' in this.commentData.comments[comment.cid] && this.commentData.comments[comment.cid].children.length) {\n            const childCids = this.commentData.comments[comment.cid].children;\n            for (let index = 0; index < childCids.length; index++) {\n              const childCid = childCids[index];\n              // Rerender the child comments under the new one we've made\n              this.renderCommentAndChildren(this.commentData.comments[childCid], $newComment);\n            }\n          }\n\n          $currentComment.replaceWith($newComment);\n          // Update pointer in data\n          this.commentData.comments[cid].rendered = $newComment;\n        }\n      }\n    };\n\n    // Iterate over provided comment data\n    commentsKeys.forEach((key) => {\n      const comment = comments[key];\n      processComment(comment);\n    });\n  }\n\n  /**\n   * Utility function to wrap comment in li\n   * @param {HTMLElement} $comment cp-comments-comment tag\n   * @returns Comment component wrapped in an li\n   */\n  wrapCommentInLi ($comment) {\n    const $commentWrapper = document.createElement('li');\n    $commentWrapper.classList.add('comments__list-item');\n    $commentWrapper.append($comment);\n    return $commentWrapper;\n  }\n\n  /**\n   * Utility function to correctly append a reply to a parent comment\n   * @param {HTMLElement} $comment cp-comments-comment component that is a reply\n   * @param {HTMLElement} $parentComment cp-comments-comment component that is the parent of the reply\n   */\n  renderReply($comment, $parentComment) {\n    let hasReplyWrapper = true;\n    // Assumes the only child of a comment should be a replyWrapper\n    let $replyWrapper = $parentComment.children.length ? $parentComment.children[0] : null;\n    if (!$replyWrapper) {\n      hasReplyWrapper = false;\n      $replyWrapper = document.createElement('ol');\n      $replyWrapper.classList.add('comments__list');\n    }\n\n    const $wrappedComment = this.wrapCommentInLi($comment);\n    $replyWrapper.append($wrappedComment);\n    if (!hasReplyWrapper) $parentComment.append($replyWrapper);\n  }\n\n  /**\n   * Recursive utility function to render a comment and it's children\n   * @param {object} comment Comment data for an individual comment\n   * @param {HTMLElement|undefined} $comment\n   *    [optional] The comment if it's already been rendered\n   * @param {HTMLElement|undefined} $parentComment\n   *    [optional] The parent of the main comment, if it's already rendered\n   * @returns {HTMLElement} Rendered comment from\n   */\n  renderCommentAndChildren(comment, $parentComment) {\n    const $comment = this.renderComment(comment);\n\n    // Deal with children of this comment\n    const childCids = this.commentData.comments[comment.cid].children;\n    if (childCids) {\n      for (let index = 0; index < childCids.length; index++) {\n        const childCid = childCids[index];\n        this.renderCommentAndChildren(this.commentData.comments[childCid], $comment);\n      }\n    }\n\n    // Render the child comment\n    if ($parentComment) {\n      this.renderReply($comment, $parentComment);\n    }\n\n    // Update pointer in commentData to new element\n    this.commentData.comments[comment.cid].rendered = $comment;\n    return $comment;\n  }\n\n  /**\n   * Builds rendered HTML for threaded comments from scratch\n   *\n   * @param {array} commentOrder\n   * An array of comment id's that need to have a key in commentData.comments\n   * @param {HTMLElement} parent\n   * DOM element to inject into.\n   */\n  renderCommentsPage() {\n    const pagerData = this.commentData.pager;\n\n    const currentPage = pagerData.page;\n    if (typeof currentPage !== 'number') {\n      console.error('cp-comments.renderCommentsPage: Couldn\\'t get current page');\n      return;\n    }\n\n    const cidsForPage = pagerData.cids_by_page[currentPage];\n    if (this.debug && !cidsForPage || cidsForPage && !cidsForPage.length) {\n      console.warn('cp-comments.renderCommentsPage: Couldn\\'t get list of the comment ids for the current page', currentPage, pagerData.cids_by_page);\n    }\n\n    this.dataset.page = currentPage;\n\n    // Remove all old comments\n    // @note for loop was leaving children, not sure why?\n    while (this.commentsWrapper.children.length > 0) {\n      this.commentsWrapper.children[0].remove();\n    }\n\n    // Iterate over the ordered BUT non-hierachical list of comments we need to render\n    (cidsForPage || []).forEach((cid) => {\n      if (!this.commentData.comments[cid]) {\n        console.error(`cp-comments.renderCommentsPage: Couldn\\'t get comment data for cid ${cid}`, this.commentData.comments);\n        return;\n      }\n      const comment = this.commentData.comments[cid];\n      const $comment = this.renderComment(comment);\n\n      // Add pointer to element to state\n      this.commentData.comments[cid].rendered = $comment;\n\n      if (comment.pid) comment.pid = parseInt(comment.pid);\n\n      if (\n        !comment.pid\n        || comment.pid < 1\n        // @todo this line should be removed if we add back off page parent functionality\n        || !cidsForPage.includes(comment.pid)\n      ) {\n        // Has no parent, it's a top level comment\n        $comment.dataset.depth = 0;\n        this.commentsWrapper.append(this.wrapCommentInLi($comment));\n      }\n      else {\n        const pid = comment.pid;\n\n        // Figure out what we have on the parent comment\n        if (this.commentData.comments[pid].rendered) {\n          // We have the parent already rendered\n          const $parentComment = this.commentData.comments[pid].rendered;\n          let parentDepth;\n\n          // Make sure parent comment is in the DOM\n          if ($parentComment.parentElement) {\n            parentDepth = $parentComment.dataset.depth ? parseInt($parentComment.dataset.depth) : -1;\n            // Get the depth\n            if (parentDepth >= 0) {\n              $comment.dataset.depth = parentDepth + 1;\n            }\n            else {\n              console.warn('cp-comments.renderCommentsPage: Wasn\\'t able to get parent\\'s depth, defaulting to 0', {pid, cid});\n              $parentComment.dataset.depth = 0;\n              $comment.dataset.depth = 1;\n            }\n          }\n\n          this.renderReply($comment, $parentComment);\n        }\n        else {\n          // The parent doesn't seem to be on this page, render this as a top level comment\n          this.commentsWrapper.append(this.wrapCommentInLi($comment));\n        }\n      }\n    });\n\n    // Setup loading UI\n    // Adding this to the DOM for later, originally tried adding it when needed, but it didn't get caught\n    const $loadingIndicator = this.renderLoader(\n      'new-page',\n      CpComments.translations[this.lang].loadingComments,\n    );\n\n    const $loadingIndicatorWrapper = document.createElement('li');\n    $loadingIndicatorWrapper.classList.add('comments__list-item', 'comments__list-item--new-page');\n\n    // If this isn't the first load, we assume the user has interacted with pagination, and we need to let\n    // screen reader users know when the new page has loaded, otherwise they would have to guess & check.\n    // Using assertive since we assume the just recently used pagination, so this can interrupt. (per Kelsey)\n    $loadingIndicator.setAttribute('aria-live', 'assertive');\n    $loadingIndicator.setAttribute('aria-atomic', 'true');\n    $loadingIndicator.setAttribute('hidden', '');\n    $loadingIndicator.setAttribute('tabindex', 0);\n\n    // Add loading UI to the DOM\n    $loadingIndicatorWrapper.append($loadingIndicator);\n    this.commentsWrapper.append($loadingIndicatorWrapper);\n  }\n\n  /**\n   * Render and populate data for an individual comment.\n   *\n   * @param {object} comment\n   *   Comment object.\n   * @param {string} context\n   *   Prefix for id, if comment isn't rendered in the commment thread (e.g. best response)\n   *\n   * @returns {HTMLElement}\n   */\n  renderComment(comment, context = 'thread') {\n    const $comment = document.createElement(\"cp-comments-comment\");\n    $comment.requester = this.commentData.requester;\n    $comment.comment = comment;\n    $comment.profiles = this.commentData.profiles;\n    $comment.dataset.cid = comment.cid;\n    $comment.classList = commentClassList(comment.flags);\n    $comment.setAttribute('tabindex', 0);\n    // Assuming that comment will only be rendered once in the thread,\n    // and any other context should change the context var to make sure this id is unique\n    $comment.id = `${context}__comment--${comment.cid}`;\n    if (context !== 'thread') $comment.dataset.context = context;\n    $comment.allowBestResponse = allowBestResponse(this.config);\n    $comment.allowPrivateResponse = allowPrivateResponse(this.config) && $comment.requester.private_comments;\n\n    return $comment;\n  }\n\n  /**\n   * Creates and maintains best reply section\n   * Uses properts and data from instance\n   * @param {boolean} forceRenderComment Set to true if comment's data has changed and needs to be rerendered\n   */\n  renderBestComments(forceRenderComment = false) {\n    if (allowBestResponse(this.config)) {\n      const commentData = this.commentData;\n      const hasBestCommentData = commentData && commentData.best_comment && commentData.best_comment.length;\n\n      // Create best comments wrapper if necessary\n      if (hasBestCommentData && !this.bestCommentsWrapper) {\n        const $bestCommentsWrapper = document.createElement('section');\n        $bestCommentsWrapper.classList.add('best-comments');\n        $bestCommentsWrapper.innerHTML =\n          `<h2 id=\"best-response\" class=\"best-comments__title\">\n            ${bestResponseIcon}${CpComments.translations[this.lang].bestResponse}\n          </h2>`;\n\n        // Get the comment form at the top of the comment thread\n        this.outerWrapper.insertBefore($bestCommentsWrapper, this.commentsWrapper);\n        this.bestCommentsWrapper = $bestCommentsWrapper;\n      }\n\n      if (this.bestCommentsWrapper) {\n        // Set the best comment count on the wrapper, used in styling\n        this.bestCommentsWrapper.dataset.count = hasBestCommentData ? commentData.best_comment.length : 0;\n      }\n\n      // Iterate over best reply wrapper children and remove ones that aren't a best reply anymore\n      if (this.formerBestComments && this.formerBestComments !== commentData.best_comment) {\n        for (let index = 0; index < this.bestCommentsWrapper.children.length; index++) {\n          const $childElement = this.bestCommentsWrapper.children[index];\n          if ($childElement.tagName.toLowerCase() === 'cp-comments-comment' && !commentData.best_comment.includes(parseInt($childElement.dataset.cid))) {\n            $childElement.remove();\n          }\n        }\n      }\n\n      // Add any missing best comments\n      if (hasBestCommentData) {\n        for (let index = 0; index < commentData.best_comment.length; index++) {\n          const cid = commentData.best_comment[index];\n          // See if the comment exists in the best comment wrapper already\n          const $commentAlreadyRendered = this.bestCommentsWrapper.querySelector(`[data-cid=\"${cid}\"]`);\n\n          // Render if we're forcing it, or it isn't in the best wrapper already\n          if ((forceRenderComment || !$commentAlreadyRendered)) {\n            if (commentData.comments[cid]) {\n              // We have the data for this comment\n              const $comment = this.renderComment(commentData.comments[cid], 'best');\n              $comment.classList.add('cp-comments-comment--in-best-comments-wrapper');\n              if ($commentAlreadyRendered) {\n                $commentAlreadyRendered.replaceWith($comment);\n              }\n              else {\n                this.bestCommentsWrapper.append($comment);\n              }\n            }\n            else {\n              // We need to get the data for this comment\n              const $loader = this.renderLoader(`loading-best-comment-${cid}`, 'Loading best comment');\n              this.bestCommentsWrapper.append($loader);\n\n              // Callback once we've loaded the comment\n              const commentLoaded = (data) => {\n                data = this._getDataFromResponse(data);\n                this.commentData.comments[cid] = data.comment;\n\n                // Merge in profile data\n                if ('profile' in data && 'uid' in data.profile) {\n                  const uid = data.profile.uid;\n                  if (this.profiles[uid]) {\n                    this.mergeObjectData(this.profiles[uid], data.profile);\n                  }\n                  else {\n                    this.profiles[uid] = data.profile;\n                  }\n                }\n\n                const $comment = this.renderComment(this.commentData.comments[cid]);\n                $comment.classList.add('cp-comments-comment--in-best-comments-wrapper');\n                $loader.replaceWith($comment);\n              };\n\n              this.getSingleComment(cid, commentLoaded).catch(() => {\n                const p = document.createElement(\"p\");\n                p.textContent = \"Unable to load best comment.\"\n                p.classList.add('loading-best-comment--error');\n                $loader.replaceWith(p);\n              });\n            }\n          }\n        }\n        this.formerBestComments = commentData.best_comment;\n\n        const bestComment = this.bestCommentsWrapper.querySelector('cp-comments-comment');\n\n        if (bestComment) {\n          bestComment.setAttribute(\"aria-labelledby\", \"best-response\");\n        }\n      }\n    } else {\n      if (this.debug) console.log(\"cp-comments.renderBestComments: allowBestResponse functionality disabled.\")\n    }\n  }\n\n  /**\n   * Utility function to create or update the pager\n   * Builds using current values of this.commentData.pager\n   */\n  renderPager(pagerData) {\n    const currentPage = pagerData.page;\n    const firstComment = pagerData.page * pagerData.page_size + 1;\n    const totalComments = pagerData.total_results;\n    const totalPages = pagerData.pages.length;\n    let lastComment = (pagerData.page + 1) * pagerData.page_size;\n    if (lastComment > totalComments) lastComment = totalComments;\n\n    if (totalComments === 0 || totalPages <= 1) {\n      // No need for a pager, hide it if it exists\n      if (this.pagerWrapper) {\n        this.pagerWrapper.hidden = true;\n      }\n      return;\n    }\n    else if (this.pagerWrapper && this.pagerWrapper.hidden) {\n      // More than one page, so unhide it if it exists and is hidden\n      this.pagerWrapper.hidden = false;\n    }\n\n    const setPagerHeadline = () => {\n      // Will look something like:\n      // Comments 1 through 10 out of 24 comments\n      return `${CpComments.translations[this.lang].uppercaseComments} ${firstComment} ${CpComments.translations[this.lang].through} ${lastComment} ${CpComments.translations[this.lang].outOf} ${totalComments} ${CpComments.translations[this.lang].lowercaseComments}`;\n    }\n\n    // Make the pager if we don't have one yet\n    if (!this.pagerWrapper) {\n      // Create wrapper\n      const $pagerWrapper = document.createElement('nav');\n      $pagerWrapper.classList.add('pager');\n      $pagerWrapper.setAttribute('aria-label', CpComments.translations[this.lang].paginationDescription);\n\n      // Headline\n      const $pagerHeadline = document.createElement('h3');\n      $pagerHeadline.innerText = setPagerHeadline();\n      $pagerHeadline.classList.add('pager__headline');\n      $pagerHeadline.id = 'pager__headline';\n      $pagerWrapper.append($pagerHeadline);\n      this.pagerElements.headline = $pagerHeadline;\n\n      // List\n      const $pagerList = document.createElement('ul');\n      $pagerList.classList.add('pager__list');\n      $pagerList.setAttribute('aria-labelledby', 'pager__headline');\n\n      // Pager items\n      const pagerItems = ['first', 'previous', 'current', 'next', 'last'];\n      pagerItems.forEach((itemId) => {\n        const $pagerItemWrapper = document.createElement('li');\n        $pagerItemWrapper.classList.add('pager__link-wrapper', `pager__link-wrapper--${itemId}`);\n\n        // Setup current pagerItem content\n        if (itemId === 'current') {\n          const $pagerForm  = document.createElement('form');\n          // Adding 1 because page count starts at 0\n          $pagerForm.innerHTML =\n            `<label class=\"sr-only\" for=\"pager__current-page\">${CpComments.translations[this.lang].page} </label>\n            <input type=\"text\" id=\"pager__current-page\" size=\"1\" value=\"${currentPage + 1}\"></input>\n            ${CpComments.translations[this.lang].of}\n            <span class=\"pager__total-pages\">${totalPages}</span>\n            <span class=\"sr-only\">${CpComments.translations[this.lang].pages}</span>`;\n\n          const $textField = $pagerForm.querySelector('input');\n          this.pagerElements.textField = $textField;\n          $pagerForm.addEventListener('submit', (event) => {\n            event.preventDefault();\n            // Subtracting one because page number is 0 indexed\n            const goToPage = parseInt($textField.value) - 1;\n            if (typeof goToPage === 'number') this.getPageOfComments(goToPage);\n          });\n          $pagerItemWrapper.append($pagerForm);\n        }\n        // Setup for all other pagerItems\n        else {\n          const $pagerLink = document.createElement('button');\n          $pagerLink.innerText = CpComments.translations[this.lang][itemId];\n          $pagerLink.classList.add('pager__link', `pager__link--${itemId}`);\n\n          // Add appropriate behavior\n          switch (itemId) {\n            case 'first':\n              $pagerLink.addEventListener('click', () => {\n                this.getPageOfComments(0);\n              });\n              break;\n            case 'previous':\n              $pagerLink.addEventListener('click', () => {\n                const currentPage = parseInt(this.dataset.currentPage);\n                this.getPageOfComments(currentPage - 1);\n              });\n              break;\n            case 'next':\n              $pagerLink.addEventListener('click', () => {\n                const currentPage = parseInt(this.dataset.currentPage);\n                this.getPageOfComments(currentPage + 1);\n              });\n              break;\n            case 'last':\n              $pagerLink.addEventListener('click', () => {\n                this.getPageOfComments(totalPages - 1);\n              });\n              break;\n          }\n\n          // Add a pointer to the element for easy access\n          this.pagerElements[itemId] = $pagerLink;\n\n          $pagerItemWrapper.append($pagerLink);\n        }\n        $pagerList.append($pagerItemWrapper);\n      });\n\n      $pagerWrapper.append($pagerList);\n      this.outerWrapper.append($pagerWrapper);\n      this.pagerWrapper = $pagerWrapper;\n    }\n    else {\n      // Check total page count for updates\n      const $totalPages = this.pagerWrapper.querySelector('.pager__total-pages');\n      if (parseInt($totalPages.innerText) !== totalPages) {\n        $totalPages.innerText = totalPages;\n      }\n\n      this.pagerElements.headline.innerText = setPagerHeadline();\n\n      // Make sure the current page number is in the text field\n      this.pagerElements.textField.value = pagerData.page + 1;\n    }\n\n    // Disable/re-enable first/previous controls if necessary\n    if (pagerData.page === 0) {\n      this.pagerElements.first.disabled = true;\n      this.pagerElements.previous.disabled = true;\n    }\n    else {\n      if (this.pagerElements.first.disabled) this.pagerElements.first.disabled = false;\n      if (this.pagerElements.previous.disabled) this.pagerElements.previous.disabled = false;\n    }\n\n    // Disable/re-enable last/next controls if necessary\n    if (pagerData.page === totalPages - 1) {\n      this.pagerElements.last.disabled = true;\n      this.pagerElements.next.disabled = true;\n    }\n    else {\n      if (this.pagerElements.last.disabled) this.pagerElements.last.disabled = false;\n      if (this.pagerElements.next.disabled) this.pagerElements.next.disabled = false;\n    }\n  }\n\n  /**\n   * Render and configure a comment form.\n   *\n   * @param data\n   * The raw commentData that will be passed on to the form.\n   * @param comment\n   * The comment (if this is an edit) or null otherwise.\n   * @param parent\n   * The parent comment data object (not DOM Element)\n   * @returns {HTMLElement}\n   */\n  renderCommentForm(data, comment, parent) {\n    // Create the div that holds a comment form.\n    let $wrapper = document.createElement(\"div\");\n\n    // Add comment form wrapper classes.\n    $wrapper = this.setCommentFormWrapperClasses($wrapper, comment, parent);\n    // Set variables and build markup for the form.\n    const $cpCommentsForm = document.createElement(CpCommentsForm.tag);\n    $wrapper.append($cpCommentsForm);\n\n    $cpCommentsForm.data = data;\n    $cpCommentsForm.comment = comment || { subscription_notify: true };\n    $cpCommentsForm.parent = parent;\n    // Set a pointer on the\n    $cpCommentsForm.parentCpComments = this;\n\n    return $wrapper;\n  }\n\n  /**\n   * Adds classes reply-comment-form, edit-comment-form, and\n   * private-comment-form to the comment form wrapper class.\n   *\n   * @param el\n   * Element you are adding the classes too.\n   * @param comment\n   * Comment data that helps decide if it is private, edit, or reply.\n   * @param parent\n   * Parent comment data object, helps decide if it is private.\n   * @returns {*} Returns the element from the first param\n   */\n  setCommentFormWrapperClasses(el, comment, parent) {\n    // Add classes for Edit, reply, and private forms.\n    if (comment && comment.cid) {\n      // Editing a comment.\n      if (comment.private === 1 || (parent && parent.private === 1)) {\n        // Editing existing comment that is private.\n        el.setAttribute(\"class\", \"private-comment-form edit-comment-form\");\n      } else {\n        // Editing existing comment.\n        el.setAttribute(\"class\", \"edit-comment-form\");\n      }\n    } else {\n      // Posting a new comment or replying to an existing comment.\n      if (\n        (comment && comment.private === 1) ||\n        (parent && parent.private === 1)\n      ) {\n        // Form is reply and it is private.\n        el.setAttribute(\"class\", \"private-comment-form reply-comment-form\");\n      } else if (parent) {\n        // Replying to existing comment.\n        el.setAttribute(\"class\", \"reply-comment-form\");\n      } else {\n        // Posting new comment.\n        el.setAttribute(\"class\", \"post-comment-form\");\n      }\n    }\n\n    return el;\n  }\n\n  /**\n   * Called when an attribute is changed on the component.\n   *\n   * @param {string} attr - Name of the attribute.\n   * @param oldVal - The old value of the attribute.\n   * @param newVal - The new value of the attribute.\n   */\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(attr, oldVal, newVal);\n  }\n\n  /**\n   * Check if an object is empty.\n   */\n  isEmpty(obj) {\n    for (let prop in obj) {\n      if (obj.hasOwnProperty(prop)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Safely process property values on connect.\n   *\n   * A user may set a property on an instance of an element, before its prototype has been connected to this class.\n   * The _upgradeProperty() method will check for any instance properties and run them through the proper class setters.\n   * @param prop\n   * @private\n   */\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      if (this.debug) console.log(prop + \" property set, calling setter.\");\n      let value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\n\n/**\n * Creates a new CpCommentsComment element.\n * @class\n */\nclass CpCommentsComment extends PFElement {\n  static get version() {\n    return \"1.0.64\";\n  }\n\n  get html() {\n    return `<style>@charset \"UTF-8\";*,:after,:before{box-sizing:border-box}:focus,:host:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 2px 3px #0066cc55}:host{display:block;font-size:1.125rem;line-height:1.6667;font-family:RedHatText,'Red Hat Text','Helvetica Neue',Arial,sans-serif;color:#252525;-moz-tab-size:4;-o-tab-size:4;tab-size:4}:host([hidden]),[hidden][hidden][hidden]{display:none}a{color:#06c;text-decoration:underline}a:focus,a:hover{color:#036;text-decoration:none}a:visited{color:#036}button{cursor:pointer}input,select,textarea{margin:0;font:inherit;color:inherit}.sr-only[class],.visually-hidden[class]{position:absolute;overflow:hidden;clip:rect(0,0,0,0);width:1px;height:1px;padding:0;border:0;white-space:nowrap}.best-comments__title{position:absolute;top:-.8125em;left:0;z-index:10;display:block;width:-moz-fit-content;width:fit-content;margin:0 0 0 .625rem;padding:0 .5rem;font-size:1rem;color:#3f9c35;font-weight:700;background:#fff}:host(.cp-comments-comment--in-best-comments-wrapper) .best-comments__title{display:none}.best-comments-icon{text-indent:0}.best-comments-icon:before{content:'\u2605';display:inline-block;margin-right:.25em;padding:.25em;border-radius:50%;line-height:1;color:#fff;font-weight:400;font-style:normal;font-variant:normal;text-decoration:inherit;text-transform:none!important;background:#3f9c35;transform:scale(.8);text-rendering:optimizeLegibility;font-smoothing:antialiased}.comment{display:grid;grid-template-rows:min-content min-content;grid-template-columns:5rem 1fr;gap:1.75rem;margin:0;padding:1rem}@media (min-width:500px){.comment{gap:0 1.75rem}}.comment-body,.comment-head,.comments-add-comment-actions{overflow:hidden;grid-column:2;max-width:100%}.user-picture{grid-row:1;grid-column:1}@media (min-width:500px){.user-picture{grid-row:1/span 2}}.comment-body{grid-column:1/-1;margin:-4px;padding:4px}@media (min-width:500px){.comment-body{grid-column:2}}.user-picture img,.user-picture pfe-avatar{width:5rem;height:5rem}.user-picture .badge{display:block;clear:both;min-width:.625rem;margin:0 0 .25rem;padding:.1875rem 0 .25rem;border-bottom:1px solid #d1d1d1;border-radius:0;color:#4c4c4c;white-space:normal;letter-spacing:-.02em;text-transform:uppercase;background:0 0}.badge,.user-picture .badge{font-size:12px;line-height:1}.badge{display:inline-block;min-width:10px;padding:3px 7px;border-radius:10px;color:#fff;font-weight:700;text-align:center;vertical-align:baseline;white-space:nowrap;background-color:#777}.user-picture .badge.administrator,.user-picture .badge.red-hat{position:relative;width:100%;margin:0 0 .25rem;border-bottom:0;font-size:.75rem;color:#fff;background-color:#e00;margin-top:-4px}.user-picture .badge:first-of-type:not(.red-hat,.administrator){margin-top:4px}.user-badges .badge.administrator:before{content:none}.user-badges .badge.community-leader:before{content:'\\\\f103'}.user-picture .points{display:block;clear:both;font-size:14px;line-height:1.5;text-align:center;text-transform:capitalize}.user-name{display:inline-block;overflow:hidden;max-width:100%;text-overflow:ellipsis}@font-face{font-family:nimbusicons;src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.eot);src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.eot#iefix) format(\"embedded-opentype\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.woff) format(\"woff\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.ttf) format(\"truetype\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.svg#nimbusicons) format(\"svg\");font-weight:400;font-style:normal}@media screen and (-webkit-min-device-pixel-ratio:0){@font-face{font-family:nimbusicons;src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.svg#nimbusicons) format(\"svg\")}}.nimbus-icon-ribbon:before,.user-badges .badge.admin:before,.user-badges .badge.administrator:before,.user-badges .badge.community-leader:before{content:\"\\f103\"}.user-badges{display:inline;margin-left:.9375rem}.user-badges .badge{background:0 0;font-weight:400;border-radius:0;padding:.25rem .5rem;vertical-align:middle;color:#06c}.user-badges .badge:before{content:\"\";display:inline-block;background:#a9a9a9;width:.25rem;height:.25rem;vertical-align:middle;margin-left:-.625rem;margin-right:.5rem;margin-top:-.0625rem;border-radius:50%}.user-badges .badge[href]:focus,.user-badges .badge[href]:hover{color:#004080}.user-badges .badge.admin,.user-badges .badge.administrator,.user-badges .badge.community-leader{color:#252525}.user-badges .badge.admin:before,.user-badges .badge.administrator:before,.user-badges .badge.community-leader:before{display:inline-block;font-family:nimbusicons;font-style:normal;font-weight:400;font-variant:normal;line-height:1;text-decoration:inherit;text-transform:none!important;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-smoothing:antialiased;border-radius:0;background:0 0;width:auto;height:auto;font-size:1rem}.user-profile-sidebar .user-badges{display:block;margin:0}.user_badges{margin:.5rem}.user_badges .badge{margin-right:.25rem;margin-bottom:.125rem;padding:.3em .6em;border-radius:.25em;background:#fff;color:#252525;font-weight:400;text-shadow:none;font-size:75%;line-height:1em}.user_badges .badge.administrator,.user_badges .badge.red-hat{color:#a30000}.user_badges .badge.community-leader{color:#0088ce}:host(.cp-comments-comment--is-best) .comment{padding-top:1.5rem;box-shadow:inset 0 0 0 1px #3f9c35}:host(.cp-comments-comment--in-best-comments-wrapper) .comment{box-shadow:none}@keyframes new-comment{0%,25%{box-shadow:inset 0 0 0 2px #2b9af3}100%{box-shadow:inset 0 0 0 2px transparent}}:host(.cp-comments-comment--new) .comment{animation:5s ease-out new-comment}.comment{position:relative}.comment-head{height:-moz-min-content;height:min-content}@media (min-width:768px){.comment-head{display:grid;grid-template-rows:min-content;grid-template-columns:1fr 1fr;gap:1rem}}.comment-info{display:flex;flex-wrap:wrap;gap:1rem;height:-moz-min-content;height:min-content;margin-bottom:.5rem;font-size:.875rem}@media (min-width:768px){.comment-info{justify-self:end;grid-row:1;grid-column:2;margin:0}}.comment-info .private{display:inline-block;padding:0 .5em;color:#900;background:#ffe6e6}.user-info{display:flex;align-items:center;height:-moz-min-content;height:min-content}@media (min-width:768px){.user-info{grid-row:1;grid-column:1}}.user-name{display:inline-block;text-decoration:none}.user-name:focus,.user-name:hover{text-decoration:underline}.action-links[class]{margin:0;padding:.5rem 0 0;text-align:right}@media (min-width:768px){.action-links[class]{display:flex;flex-wrap:wrap;gap:1rem;align-items:baseline;text-align:left}}.action-links li{display:flex;align-items:baseline;margin:0;padding:0;list-style:none;text-transform:capitalize}.action-links a{display:inline-flex;align-items:baseline;width:-moz-fit-content;width:fit-content;padding:6px;font-size:.875em;line-height:1.5;text-decoration:none}.action-links pfe-icon{--pfe-icon--Color:currentColor;--pfe-icon--size:21px;align-self:center;margin-right:4px}:host(.cp-comments-comment--in-best-comments-wrapper) .comment-delete,:host(.cp-comments-comment--in-best-comments-wrapper) .comment-edit,:host(.cp-comments-comment--in-best-comments-wrapper) .comment-reply{display:none}.comment-delete pfe-icon,.comment-edit pfe-icon,.comment-reply pfe-icon{--pfe-icon--size:17px}:host(.comment--confirm-delete){box-shadow:inset 0 0 0 1px #a00}:host(.comment--confirm-delete) .action-links{display:none}.confirm-delete-wrapper{position:relative;z-index:10;grid-column:1/-1;padding:1em 1.5em;border:1px solid #900;background:#fff}@media (min-width:768px){.confirm-delete-wrapper{display:grid;grid-template-columns:minmax(0,2fr) min-content;gap:1em}}.confirm-delete-wrapper:focus{outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px #c00}.confirm-delete-wrapper:before{content:'';position:absolute;top:0;left:50%;z-index:9;display:block;width:.75em;height:.75em;border:1px solid #900;border-right-color:transparent;border-bottom-color:transparent;background:#fff;transform:translate(-50%,-50%) rotate(45deg)}.confirm-delete-wrapper h3{margin:0;font-size:1.125em}.confirm-delete-actions{display:flex;flex-direction:column;gap:.75em}.confirm-delete-actions button{padding:.5em 1em;border:0;border-radius:3px;font-size:1rem;font:inherit;white-space:nowrap;background:#fff}.comment-confirm-delete[class]{border-color:#c9190b;color:#fff;background-color:#c9190b}.comment-confirm-delete[class]:focus,.comment-confirm-delete[class]:hover{background:#a30000}.comment-cancel-delete{box-shadow:inset 0 0 0 1px currentColor}.comment-cancel-delete[class]:focus,.comment-cancel-delete[class]:hover{box-shadow:inset 0 0 0 2px currentColor}.comment-content a{overflow:hidden;overflow-wrap:break-word;word-wrap:break-word;word-break:break-word;-webkit-hyphens:auto;hyphens:auto}h2,h3,h4,h5,h6{margin:1.5em 0 .25em;line-height:1.3333;font-family:RedHatDisplay,'Red Hat Display','Helvetica Neue',Arial,sans-serif;font-weight:700}h2{font-size:1.625rem}h3{font-size:1.5rem}h4{font-size:1.25rem}h5,h6{font-size:1.125rem}h6{font-weight:500}h2:first-child,h3:first-child,h4:first-child,h5:first-child,h6:first-child,p:first-child{margin-top:0}blockquote{position:relative;overflow:hidden;min-height:4.5em;margin:0;padding:1em;background:#ededed}@media (min-width:500px){blockquote{padding:1.5em 1.5em 1.5em 2.5em}}blockquote>:last-child{margin-bottom:0}blockquote blockquote{padding:1em .5em;padding-right:0;border-left:2px solid #999}@media (min-width:500px){blockquote blockquote{padding:1em}}blockquote h1+blockquote,blockquote h2+blockquote,blockquote h3+blockquote,blockquote h4+blockquote,blockquote h5+blockquote,blockquote h6+blockquote,blockquote ol+blockquote,blockquote p+blockquote,blockquote ul+blockquote{margin-bottom:0}@media (min-width:500px){blockquote:before{content:'\u201C';position:absolute;top:.5em;left:.125em;display:block;opacity:.5;font-size:4em;line-height:0;font-style:normal;-webkit-user-select:none;-moz-user-select:none;user-select:none}blockquote blockquote:before{content:none}}ol,ul{margin:0;padding:0 0 0 2.2em}li{margin-bottom:.5em}pre{overflow:auto;width:100%;max-width:100%;padding:1em 1.5em;font-size:.875rem;line-height:1.6667;font-family:RedHatMono,'Red Hat Mono',Consolas,monospace;color:#151515;white-space:pre;word-break:normal;background:#f5f5f5;overflow-wrap:normal}img{border:0}button,input,select,textarea{max-width:100%;margin:0}table{width:100%;border-spacing:0;border-collapse:collapse}td,th{padding:.625rem .875rem;text-align:left}tr{border-bottom:1px solid grey}th{font-size:.875em;font-weight:600}code,mark{padding:2px;background-color:#f5f5f5}select,textarea{padding:.375rem .75rem;border:1px solid #d1d1d1;border-radius:0;font-size:1rem;line-height:1.5rem;background:#fff}blockquote,ol,p,table,ul{margin-top:0;margin-bottom:1.25em}\n/*# sourceMappingURL=cp-comments-comment.min.css.map */\n</style><article class=\"comment\" id=\"comment-${this.comment.cid}\">\n  <div class=\"user-picture\">\n    ${this.authorProfile && this.authorProfile.url ?\n      `<a\n        href=\"${this.authorProfile.url}\"\n        class=\"avatar\"\n        title=\"${CpComments.translations[this.parentCpComments.lang].viewUserProfile}\">`\n      : ''\n    }\n    ${this.authorProfile ?\n      `<pfe-avatar\n        class=\"PFElement\"\n        pfe-pattern=\"squares\"\n        pfe-name=\"${this.authorProfile.full_name}\"\n        ${this.authorProfile.profile_img ? `pfe-src=\"${this.authorProfile.profile_img}\" ` : ``}>\n      </pfe-avatar>`\n      : ''\n    }\n    ${this.authorProfile && this.authorProfile.url ?\n      `</a>`\n      : ''\n    }\n\n    ${this.authorProfile && this.authorProfile.profileBadges && this.authorProfile.profileBadges.avatar ?\n      this.authorProfile.profileBadges.avatar\n      : ''\n    }\n\n    ${this.authorProfile && this.authorProfile.points > 0 ?\n      `<span class=\"points\">${this.authorProfile.points} ${CpComments.translations[this.parentCpComments.lang].points}</span>`\n      : ''\n    }\n  </div>\n\n  <div class=\"comment-head\">\n    <div class=\"comment-info\">\n      ${this.comment.private == 1 ? `<span class=\"private\">${CpComments.translations[this.parentCpComments.lang].privateComment}</span>` : '' }\n      <time datetime=\"${this.comment.createdDateTime}\">${this.comment.formattedCreatedDate}</time>\n    </div>\n    <div class=\"user-info\">\n      ${this.authorProfile && this.authorProfile.url ?\n        `<a href=\"${this.authorProfile.url}\" class=\"user-name\">`\n        : ''\n      }\n        ${this.authorProfile && this.authorProfile.full_name}\n      ${this.authorProfile && this.authorProfile.url ?\n        `</a>`\n        : ''\n      }\n      <span class=\"visually-hidden\">says<span aria-hidden=\"true\">:</span></span>\n      ${this.authorProfile && this.authorProfile.profileBadges && this.authorProfile.profileBadges.eyebrow ?\n        `<div class=\"user-badges\">${this.authorProfile.profileBadges.eyebrow}</div>`\n        : ''\n      }\n    </div>\n  </div>\n\n  <div class=\"comment-body\">\n    <div class=\"comment-content\">\n      ${ this.comment.commonmark }\n\n      <ul class=\"action-links\">\n        ${this.hasPostPermission && this.getAttribute('data-context') !== 'best' ?\n          (this.comment.private != 1 || (this.comment.private == 1 && this.allowPrivateResponse)) ?\n          `<li class=\"comment-reply\">\n            <a href=\"#reply-${this.comment.uid}/${this.comment.cid}\" class=\"use-ajax ajax-comment-reply ${this.comment.private == 1 ? 'comment-reply-private' : 'comment-reply'} ajax-processed\" id=\"reply-${this.comment.cid}\">\n              <pfe-icon icon=\"rh-reply\"></pfe-icon>\n              ${this.comment.private == 1 ? CpComments.translations[this.parentCpComments.lang].replyPrivately : CpComments.translations[this.parentCpComments.lang].reply}\n            </a>\n          </li>` : ''\n        : ''}\n\n        ${this.comment.can_edit ?\n        `<li class=\"comment-edit\">\n          <a href=\"#edit-${this.comment.cid}\" class=\"use-ajax ajax-comment-edit ajax-processed\">\n            <pfe-icon icon=\"rh-pencil\"></pfe-icon>\n            ${CpComments.translations[this.parentCpComments.lang].edit}\n          </a>\n        </li>` : ''}\n\n        ${this.hasModerateBestCommentPermission && this.comment.private != 1 ?\n        `<li class=\"comment-best\">\n          <a href=\"#mark-as-best-${this.comment.cid}\" class=\"comment-best\">\n            ${CpComments.translations[this.parentCpComments.lang].markAsBestResponse}\n          </a>\n        </li>` : ''}\n\n        ${this.comment.can_edit ?\n        `<li class=\"comment-delete\">\n          <a href=\"#delete-${this.comment.cid}\" class=\"use-ajax ajax-delete ajax-processed\">\n            <pfe-icon icon=\"rh-trash\"></pfe-icon>\n            ${CpComments.translations[this.parentCpComments.lang].delete}\n          </a>\n        </li>` : ''}\n\n      </ul>\n    </div>\n  </div>\n</article>\n<slot></slot>`;\n  }\n  static get tag() {\n    return \"cp-comments-comment\";\n  }\n\n  static get templateUrl() {\n    return \"cp-comments-comment.html\";\n  }\n\n  static get styleUrl() {\n    return \"cp-comments-comment.css\";\n  }\n\n  constructor() {\n    super(CpCommentsComment, { delayRender: true });\n\n    // Make sure 'this' is tied to the instance of the class for these functions\n    // Needed for functions called in contexts where 'this' will be set to something else, e.g. event callbacks.\n    const functionsToBind = [\n      'replyClickHandler',\n      'editClickHandler',\n      'markAsBestResponseClickHandler',\n      'deleteClickHandler',\n      'deleteConfirmClickHandler',\n      'handleBestCommentCallback',\n    ];\n    functionsToBind.forEach(\n      (functionName) => {\n        if (typeof this[functionName] !== 'function') {\n          console.error(`Couldn't find function '${functionName}' to bind this to.`);\n          return;\n        }\n         this[functionName] = this[functionName].bind(this);\n      }\n    );\n\n    // Create vars for element pointers\n    this.commentWrapper = null;\n    this.bestResponseIcon = null;\n  }\n\n  /**\n   * Getter for comment data.\n   *\n   * @returns {*} - Array of comment data.\n   */\n  get comment() {\n    return this._comment;\n  }\n\n  /**\n   * Setter for comment data.\n   *\n   * @param value {object} - The comment data object.\n   */\n  set comment(value) {\n    this._comment = value;\n  }\n\n  /**\n   * Called when the tag is processed in the DOM.\n   *\n   * @callback\n    */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._upgradeProperty(\"comment\");\n    this._upgradeProperty(\"data\");\n\n    // Format created and modified dates for use in template/UI\n    if (this.comment && this.comment.created) {\n      const createdDateFormats = this.formatDate(this.comment.created);\n      // Date for UI\n      this.comment.formattedCreatedDate = `${createdDateFormats.date} ${createdDateFormats.time}`;\n      // Date for <time> tag's datetime attribute\n      this.comment.createdDateTime = createdDateFormats.iso;\n\n      // @todo Modified/edited date isn't currently in UI, we may want to change that\n      if (this.comment.changed && this.comment.changed !== this.comment.created) {\n        const editDateFormats = this.formatDate(this.comment.changed);\n        this.comment.formattedEditDate = `${editDateFormats.date} ${editDateFormats.time}`;\n        this.comment.editDateTime = editDateFormats.iso;\n      }\n    }\n\n    // Get parent CP Comments element to get data and methods from\n    const $parentCpComments = this.getRootNode().host;\n    if ($parentCpComments) this.parentCpComments = $parentCpComments;\n\n    if (this.comment.uid in $parentCpComments.profiles) {\n      this.authorProfile = $parentCpComments.profiles[this.comment.uid];\n    }\n    else {\n      console.error(`cpCommentsComment: Couldn't get profile data for comment ID: ${this.comment.cid}. The Profile ID is:`, this.comment.uid);\n      // Providing enough empty data so we don't encounter an exception\n      this.authorProfile = {\n        'full_name': 'Error getting profile data',\n        'points': 1337,\n      }\n    }\n\n    this.hasPostPermission = $parentCpComments.hasPostPermission;\n    this.hasModerateBestCommentPermission = $parentCpComments.hasModerateBestCommentPermission;\n    this.isOwner = parseInt($parentCpComments.commentData.requester.uid) === parseInt(this.comment.uid);\n\n    this.render();\n\n    this.commentWrapper = this.shadowRoot.querySelector('.comment');\n\n    // Reply link behavior\n    const $replyLink = this.shadowRoot.querySelector('.ajax-comment-reply');\n\n    if ($replyLink && $parentCpComments) {\n      // If comment status isn't 2, then new comments are disabled, or comments are hidden\n      // Also limiting replies to 2 levels\n      if ($parentCpComments.commentData.comment_status !== '2') {\n        $replyLink.parentElement.style.display = 'none';\n      }\n      else {\n        $replyLink.addEventListener('click', this.replyClickHandler);\n      }\n    }\n\n    // Edit link behavior\n    const $editLink = this.shadowRoot.querySelector('.ajax-comment-edit');\n    if ($editLink && $parentCpComments) {\n      $editLink.addEventListener('click', this.editClickHandler);\n    }\n\n    // Mark as Best Response behavior\n    const $markAsBestResponseLink = this.shadowRoot.querySelector('a.comment-best');\n\n    // @todo This is covering an issue in the API that doesn't send the correct 'best reply' status\n    // in an individual comment's data\n    const hasBestCommentCid = $parentCpComments && $parentCpComments.commentData && $parentCpComments.commentData.best_comment && $parentCpComments.commentData.best_comment[0];\n    if (hasBestCommentCid) {\n      if (parseInt($parentCpComments.commentData.best_comment[0]) === parseInt(this.comment.cid)) {\n        this.comment.best = true;\n      }\n    }\n\n    // Update comment UI based on 'best response' state\n    if ($markAsBestResponseLink && $parentCpComments) {\n      $markAsBestResponseLink.addEventListener('click', this.markAsBestResponseClickHandler);\n\n      // Update UI based on best comment status on initial load\n      this.updateBestCommentUi();\n    }\n\n    // Delete behavior\n    const $deleteLink = this.shadowRoot.querySelector('.ajax-delete');\n    if ($deleteLink && $parentCpComments) {\n      $deleteLink.addEventListener('click', this.deleteClickHandler);\n    }\n  }\n\n  /**\n   * Utility function to change\n   * @param {number} timestamp Timestamp from Drupal\n   * @returns {object} Object with date, time, iso\n   */\n  formatDate(timestamp) {\n    // Dates we're getting are in a shorter timestamp format than JS wants\n    const dateObject = new Date(parseInt(timestamp) * 1000);\n    const $parentCpComments = this.getRootNode().host;\n\n    // Get user locale to format timestamp\n    const userLocale = $parentCpComments.lang ? $parentCpComments.lang : 'en';\n    const locale = userLocale === 'zh_CN' ? 'zh-cn' : userLocale;\n    return {\n      'date': dateObject.toLocaleDateString(\n        locale,\n        {\n          year:\"numeric\",\n          month:\"short\",\n          day:\"numeric\"\n        }\n      ),\n      'time': dateObject.toLocaleTimeString(\n        locale,\n        { timeStyle: 'short' }\n      ),\n      'iso': dateObject.toISOString()\n    };\n  }\n\n  /**\n   * Utility function to update verbiage and icon of mark as best comment link, depending on state\n   */\n  updateBestCommentUi() {\n    const $markAsBestResponseLink = this.shadowRoot.querySelector('a.comment-best');\n    const isBestComment = this.comment && this.comment.best;\n\n    // Make sure we have required info, or error out\n    if (!this.comment || !$markAsBestResponseLink) {\n      console.error(\n        'cp-comments-comment.updateBestCommentUi: Didn\\'t have required data or elements to complete UI update',\n        {\n          'this.comment': this.comment,\n          '$markAsBestResponseLink': $markAsBestResponseLink,\n        }\n      );\n      return;\n    }\n    // Check if it's the best reply, and write to DOM if it's not setup correctly\n    if (isBestComment && !this.classList.contains('cp-comments-comment--is-best')) {\n      this.classList.add('cp-comments-comment--is-best');\n      $markAsBestResponseLink.innerHTML = CpComments.translations[this.parentCpComments.lang].unmarkAsBestResponse;\n\n      // Make best response icon if it doesn't exist\n      if (!this.bestResponseIcon) {\n        // Convert best response icon HTML string to DOM object\n        const $bestResponseTag = document.createElement('div');\n        $bestResponseTag.classList.add('best-comments__title');\n        $bestResponseTag.innerHTML = `${bestResponseIcon} ${CpComments.translations.en.bestResponse}`;\n        this.commentWrapper.prepend($bestResponseTag);\n        this.bestResponseIcon = $bestResponseTag;\n      }\n      // Otherwise prepend best response icon\n      else {\n        this.commentWrapper.prepend(this.bestResponseIcon);\n      }\n    }\n    // Check if it's NOT the best reply, and write to DOM if it's not setup correctly\n    else if (!isBestComment && this.classList.contains('cp-comments-comment--is-best')) {\n      this.classList.remove('cp-comments-comment--is-best');\n      $markAsBestResponseLink.innerHTML = CpComments.translations[this.parentCpComments.lang].markAsBestResponse;\n      // Remove best response icon from DOM\n      if (this.bestResponseIcon && this.bestResponseIcon.parentElement) {\n        this.bestResponseIcon.remove();\n      }\n    }\n  }\n\n  /**\n   * Reply Link click handler\n   * @param {MouseEvent} event\n   */\n  replyClickHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const $parentCpComments = this.parentCpComments;\n    if ($parentCpComments.debug) console.log(\"comment reply\");\n    // Prevent adding multiple reply forms\n    for (let index = 0; index < this.children.length; index++) {\n      const $child = this.children[index];\n      if ($child.classList.contains('reply-comment-form')) {\n        // We've found a reply form.\n        const $cpCommentsForm = $child.querySelector('cp-comments-form');\n        if (focusCommentFormTextArea($cpCommentsForm)) {\n          // If we successfully focus the text area, don't add a new reply form\n          return;\n        }\n      }\n    }\n    // If we didn't find an existing reply form/couldn't focus the textarea, add a new one\n    const $newCpCommentsForm = $parentCpComments.renderCommentForm($parentCpComments.commentData, null, this.comment);\n\n    // Append the form to the slot and then scroll to it.\n    $parentCpComments.renderReply($newCpCommentsForm, this);\n    focusCommentFormTextArea($newCpCommentsForm);\n  }\n\n  /**\n   * Edit Link click handler\n   * @param {MouseEvent} event\n   */\n  editClickHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const $parentCpComments = this.parentCpComments;\n    if ($parentCpComments.debug) console.log(\"edit comment\");\n    // Get parent comment data if there is a  parent\n    let parentCommentData = null;\n    if (this.comment.pid && $parentCpComments.commentData.comments[this.comment.pid]) {\n      parentCommentData = $parentCpComments.commentData.comments[this.comment.pid];\n    }\n\n    this.classList.add('has-edit-form');\n    const $editForm = $parentCpComments.renderCommentForm($parentCpComments.commentData, this.comment, parentCommentData);\n    const commentBodyClassName = 'comment-body';\n    $editForm.classList.add(commentBodyClassName);\n    $editForm.querySelector('cp-comments-form').dataset.editForm = true;\n    // Append the form to the slot and then scroll to it.\n    this.shadowRoot.querySelector(`.${commentBodyClassName}`).replaceWith($editForm);\n    focusCommentFormTextArea($editForm);\n  }\n\n  /**\n   * Utility function to respond to best response API response\n   * Updates state and rerenders cp comments and sub comments\n   * @param {object} data Server response from mark as best response API request\n   */\n  handleBestCommentCallback(data) {\n    const $parentCpComments = this.parentCpComments;\n\n    const bestCommentId = data.data.comment_id;\n    const removedBestReply = this.comment.best;\n\n    // @note Assuming there's only one best reply here, that may change, then this logic and the API may need to change\n    const commentData = $parentCpComments.commentData;\n    const formerBestCommentId = commentData.best_comment && commentData.best_comment.length ? commentData.best_comment[0] : 0;\n    if (removedBestReply) {\n      commentData.best_comment = [];\n    }\n    else {\n      commentData.best_comment = [bestCommentId];\n    }\n\n    // Update old best comment's data\n    let haveFormerBestCommentData = false;\n    if (formerBestCommentId && commentData.comments[formerBestCommentId]) {\n      haveFormerBestCommentData = true;\n      commentData.comments[formerBestCommentId].best = false;\n      commentData.comments[formerBestCommentId].rendered.comment.best = false;\n    }\n\n    // Update new best comment's data\n    let haveNewBestCommentData = false;\n    if (!removedBestReply && commentData.comments[bestCommentId]) {\n      haveNewBestCommentData = true;\n      commentData.comments[bestCommentId].best = true;\n      commentData.comments[bestCommentId].rendered.comment.best = true;\n    }\n\n    // Apply updates to comment data\n    $parentCpComments.commentData = commentData;\n\n    // Update rendering based on the updated data\n    if (haveFormerBestCommentData) commentData.comments[formerBestCommentId].rendered.updateBestCommentUi();\n    if (haveNewBestCommentData) commentData.comments[bestCommentId].rendered.updateBestCommentUi();\n    $parentCpComments.renderBestComments();\n    const statusMessage = $parentCpComments.commentData.best_comment && $parentCpComments.commentData.best_comment.length === 1 ?\n      CpComments.translations[$parentCpComments.lang].markAsBestSuccess :\n      CpComments.translations[$parentCpComments.lang].removeAsBestSuccess;\n    $parentCpComments.addStatusMessage(\n      statusMessage,\n      '',\n      'success',\n    );\n  }\n\n  /**\n   * Mark as Best Response click handler\n   * @param {MouseEvent} event\n   */\n  markAsBestResponseClickHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const $parentCpComments = this.parentCpComments;\n\n    if (!this.comment.cid) {\n      console.error('cp-comments-comments.markAsBestResponseClickHandler: Couldn\\'t get comment id.');\n      $parentCpComments.addStatusMessage(\n        CpComments.translations[$parentCpComments.lang].markAsBestResponseErrorTitle,\n        CpComments.translations[$parentCpComments.lang].unknownError,\n        'error',\n        {id: 'best-response-unknown-error'}\n      );\n      return;\n    }\n\n    // Get auth headers\n    const fetchOptions = $parentCpComments.getGlobalFetchOptions();\n\n      // Clicking this link will toggle best reply status\n    fetchOptions.method = this.comment.best ? \"DELETE\" : \"POST\";\n\n    const fetchUrl = `${$parentCpComments.getCommentApiDomain()}/api/v1/comments/best/${this.comment.cid}`;\n\n    fetch(fetchUrl, fetchOptions)\n      .then(handleFetchResponse)\n      .then(this.handleBestCommentCallback)\n      .catch(error => {\n        console.error(error);\n        $parentCpComments.addStatusMessage(\n          CpComments.translations[$parentCpComments.lang].markAsBestResponseErrorTitle,\n          CpComments.translations[$parentCpComments.lang].unknownError,\n          'error',\n          {id: 'unknown-error'}\n        );\n      });\n\n  }\n\n  /**\n   * Confirm Delete button click handler\n   * Sends API request to delete comment and updates UI.\n   * @param {MouseEvent} event\n   */\n  deleteConfirmClickHandler() {\n    const $parentCpComments = this.parentCpComments;\n    if ($parentCpComments.debug) console.log(\"delete comment\");\n\n    if ($parentCpComments.debug) console.log(\"Deleting comment\", cid);\n    const fetchUrl = `${$parentCpComments.getCommentApiBasePath()}/${this.comment.cid}`;\n    const fetchOptions = $parentCpComments.getGlobalFetchOptions();\n    fetchOptions.method = 'DELETE';\n\n    // Get a pointer to the previous comment to focus on notification close\n    // per a11y feedback from Kelsey\n    const currentPage = $parentCpComments.commentData.pager.page;\n    const deletedCommentIndex = $parentCpComments.commentData.pager.cids_by_page[currentPage].indexOf(parseInt(this.comment.cid));\n\n    // Send the delete to the API\n    fetch(fetchUrl, fetchOptions)\n      .then(handleFetchResponse)\n      .then((data) => {\n        if (data.data.comment_id === parseInt(this.comment.cid)) {\n          // Remove the comment data\n          delete $parentCpComments.commentData.comments[this.comment.cid];\n\n          // Remove the element\n          this.remove();\n\n          // Find the previous comment in the list\n          let $focusOnClose;\n          // Make sure we haven't changed pages\n          if (deletedCommentIndex && currentPage === $parentCpComments.commentData.pager.page) {\n            // If we can't find the previous comment, or the first comment was deleted, focus the first comment\n            const previousCommentIndex = deletedCommentIndex - 1 > 0 ? deletedCommentIndex - 1 : 0;\n            const previousCommentId = $parentCpComments.commentData.pager.cids_by_page[currentPage][previousCommentIndex];\n            // Find the previous comment pointer and set it\n            if (previousCommentId in $parentCpComments.commentData.comments && 'rendered' in $parentCpComments.commentData.comments[previousCommentId]) {\n              $focusOnClose = $parentCpComments.commentData.comments[previousCommentId].rendered;\n            }\n          }\n\n          this.commentCount = data.data.total_results;\n          $parentCpComments.emitEvent('cp-comments:comment-deleted', { detail: { cpComments: $parentCpComments, commentCount: data.data.total_results }});\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].deleteSuccessTitle,\n            '',\n            'success',\n            {\n              focus: true,\n              focusOnClose: $focusOnClose\n            }\n          );\n        }\n        else {\n          console.error(`cp-comments-comment.deleteClickHandler: Didn't receive expected response from server. Expected data.comment_id to be ${ this.comment.cid } Response is:`, data);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].deleteErrorTitle,\n            CpComments.translations[$parentCpComments.lang].unknownError,\n            'error',\n            {id: 'delete-error'}\n          );\n        }\n      });\n  }\n\n  /**\n   * Delete link click handler\n   * Presents a confirmation message\n   * @param {MouseEvent} event\n   */\n  deleteClickHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const $parentCpComments = this.parentCpComments;\n    const cid = this.comment && this.comment.cid ? this.comment.cid : parseInt(this.dataset.cid);\n\n    // Create markup for a confirmation message\n    // Wrapper\n    const $confirmWrapper = document.createElement('div');\n    $confirmWrapper.classList.add('confirm-delete-wrapper');\n    $confirmWrapper.setAttribute('tabindex', 0);\n    let childrenMessage = '';\n    if ($parentCpComments.commentData.comments[cid].children && $parentCpComments.commentData.comments[cid].children.length) {\n      childrenMessage = `${CpComments.translations[this.parentCpComments.lang].warningRepliesDeleted}<br>`;\n    }\n\n    // Message\n    const $confirmMessage = document.createElement('div');\n    $confirmMessage.classList.add('confirm-delete-message');\n    $confirmMessage.innerHTML =\n      `<h3 id=\"delete-message\">\n        ${CpComments.translations[this.parentCpComments.lang].confirmToDelete}\n        ${childrenMessage}\n        ${CpComments.translations[this.parentCpComments.lang].warningNoUndo}\n      </h3>`;\n    $confirmWrapper.setAttribute(\"aria-labelledby\", \"delete-message\");\n    $confirmWrapper.append($confirmMessage);\n\n    // Actions wrapper\n    const $actionsWrapper = document.createElement('div');\n    $actionsWrapper.classList.add('confirm-delete-actions');\n\n    // Confirm action\n    const $confirmButton = document.createElement('button');\n    $confirmButton.innerText = CpComments.translations[this.parentCpComments.lang].deleteComment;\n    $confirmButton.classList.add('comment-confirm-delete');\n    $confirmButton.addEventListener('click', this.deleteConfirmClickHandler);\n    $actionsWrapper.append($confirmButton);\n\n    /**\n     * Utility function for cancel, which is used for button and escape key press\n     */\n    const cancelHandler = () => {\n      if (this.classList.contains('comment--confirm-delete')) {\n        $confirmWrapper.remove();\n        this.classList.remove('comment--confirm-delete');\n      }\n    }\n\n    // Cancel action\n    const $cancelButton = document.createElement('button');\n    $cancelButton.innerText = CpComments.translations[this.parentCpComments.lang].cancel;\n    $cancelButton.classList.add('comment-cancel-delete');\n    $cancelButton.addEventListener('click', cancelHandler);\n    $actionsWrapper.append($cancelButton);\n\n    /**\n     * Keydown handler for delete confirmation\n     * @param {KeyboardEvent} event\n     */\n    const cancelKeydownHandler = (event) => {\n      const key = event.key;\n      if (key === 'Escape') {\n        // Don't send the keypress further than this element\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Remove the UI\n        cancelHandler();\n        // Remove the listener\n        document.removeEventListener('keydown', cancelKeydownHandler);\n      }\n    };\n\n    // Respect Escape key as a way to back out\n    document.addEventListener('keydown', cancelKeydownHandler);\n\n    // Add actions to the wrapper\n    $confirmWrapper.append($actionsWrapper);\n\n    // Append the confirmation message to the comment wrapper (not the children)\n    this.shadowRoot.querySelector('.comment').append($confirmWrapper);\n    this.classList.add('comment--confirm-delete');\n    $confirmWrapper.focus();\n  }\n\n  /**\n   * Safely catch property values on connect.\n   *\n   * A user may set a property on an instance of an element, before its prototype has been connected to this class.\n   * The _upgradeProperty() method will check for any instance properties and run them through the proper class setters.\n   * @param prop\n   * @private\n   */\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      let value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\n\n/**\n * Creates a new CpCommentsForm element.\n * @class\n */\nclass CpCommentsForm extends PFElement {\n  static get version() {\n    return \"1.0.64\";\n  }\n\n  get html() {\n    return `<style>*,:after,:before{box-sizing:border-box}:focus,:host:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 2px 3px #0066cc55}:host{display:block;font-size:1.125rem;line-height:1.6667;font-family:RedHatText,'Red Hat Text','Helvetica Neue',Arial,sans-serif;color:#252525;-moz-tab-size:4;-o-tab-size:4;tab-size:4}:host([hidden]),[hidden][hidden][hidden]{display:none}a{color:#06c;text-decoration:underline}a:focus,a:hover{color:#036;text-decoration:none}a:visited{color:#036}button{cursor:pointer}input,select,textarea{margin:0;font:inherit;color:inherit}.sr-only[class],.visually-hidden[class]{position:absolute;overflow:hidden;clip:rect(0,0,0,0);width:1px;height:1px;padding:0;border:0;white-space:nowrap}.comment{display:grid;grid-template-rows:min-content min-content;grid-template-columns:5rem 1fr;gap:1.75rem;margin:0;padding:1rem}@media (min-width:500px){.comment{gap:0 1.75rem}}.comment-body,.comment-head,.comments-add-comment-actions{overflow:hidden;grid-column:2;max-width:100%}.user-picture{grid-row:1;grid-column:1}@media (min-width:500px){.user-picture{grid-row:1/span 2}}.comment-body{grid-column:1/-1;margin:-4px;padding:4px}@media (min-width:500px){.comment-body{grid-column:2}}.user-picture img,.user-picture pfe-avatar{width:5rem;height:5rem}.user-picture .badge{display:block;clear:both;min-width:.625rem;margin:0 0 .25rem;padding:.1875rem 0 .25rem;border-bottom:1px solid #d1d1d1;border-radius:0;color:#4c4c4c;white-space:normal;letter-spacing:-.02em;text-transform:uppercase;background:0 0}.badge,.user-picture .badge{font-size:12px;line-height:1}.badge{display:inline-block;min-width:10px;padding:3px 7px;border-radius:10px;color:#fff;font-weight:700;text-align:center;vertical-align:baseline;white-space:nowrap;background-color:#777}.user-picture .badge.administrator,.user-picture .badge.red-hat{position:relative;width:100%;margin:0 0 .25rem;border-bottom:0;font-size:.75rem;color:#fff;background-color:#e00;margin-top:-4px}.user-picture .badge:first-of-type:not(.red-hat,.administrator){margin-top:4px}.user-badges .badge.administrator:before{content:none}.user-badges .badge.community-leader:before{content:'\\\\f103'}.user-picture .points{display:block;clear:both;font-size:14px;line-height:1.5;text-align:center;text-transform:capitalize}.user-name{display:inline-block;overflow:hidden;max-width:100%;text-overflow:ellipsis}@font-face{font-family:nimbusicons;src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.eot);src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.eot#iefix) format(\"embedded-opentype\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.woff) format(\"woff\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.ttf) format(\"truetype\"),url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.svg#nimbusicons) format(\"svg\");font-weight:400;font-style:normal}@media screen and (-webkit-min-device-pixel-ratio:0){@font-face{font-family:nimbusicons;src:url(https://access.redhat.com/webassets/avalon/f/nimbus/nimbusicons.svg#nimbusicons) format(\"svg\")}}.nimbus-icon-ribbon:before,.user-badges .badge.admin:before,.user-badges .badge.administrator:before,.user-badges .badge.community-leader:before{content:\"\\f103\"}.user-badges{display:inline;margin-left:.9375rem}.user-badges .badge{background:0 0;font-weight:400;border-radius:0;padding:.25rem .5rem;vertical-align:middle;color:#06c}.user-badges .badge:before{content:\"\";display:inline-block;background:#a9a9a9;width:.25rem;height:.25rem;vertical-align:middle;margin-left:-.625rem;margin-right:.5rem;margin-top:-.0625rem;border-radius:50%}.user-badges .badge[href]:focus,.user-badges .badge[href]:hover{color:#004080}.user-badges .badge.admin,.user-badges .badge.administrator,.user-badges .badge.community-leader{color:#252525}.user-badges .badge.admin:before,.user-badges .badge.administrator:before,.user-badges .badge.community-leader:before{display:inline-block;font-family:nimbusicons;font-style:normal;font-weight:400;font-variant:normal;line-height:1;text-decoration:inherit;text-transform:none!important;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-smoothing:antialiased;border-radius:0;background:0 0;width:auto;height:auto;font-size:1rem}.user-profile-sidebar .user-badges{display:block;margin:0}.user_badges{margin:.5rem}.user_badges .badge{margin-right:.25rem;margin-bottom:.125rem;padding:.3em .6em;border-radius:.25em;background:#fff;color:#252525;font-weight:400;text-shadow:none;font-size:75%;line-height:1em}.user_badges .badge.administrator,.user_badges .badge.red-hat{color:#a30000}.user_badges .badge.community-leader{color:#0088ce}.user-picture{display:none}@media (min-width:500px){.user-picture{display:block}}label{display:inline-block;font-weight:700}textarea{grid-column:1/-1;width:100%;padding:.5em .75em;border:1px solid #d2d2d2;border-bottom-color:#6a6e73}@media (min-width:500px){textarea{grid-column:span 1}}.comments-add-comment-actions{display:flex;flex-wrap:wrap;gap:.5rem 1rem}.formatting-help{width:100%;text-align:right}.comment-form .comments-add-comment-actions>.formatting-help a{font-size:14px}.add-comment-buttons{width:100%}\n/*# sourceMappingURL=cp-comments-form.min.css.map */\n</style><form class=\"comment-form add-comment-form comment-wrapper\" method=\"post\" accept-charset=\"UTF-8\">\n${this.dataset.editForm !== 'true' ?\n  `<div class=\"comment\">\n\n    <div class=\"user-picture\">\n      <pfe-avatar\n        pfe-pattern=\"squares\"\n        name=\"${this.avatarFullName}\"\n        ${this.avatarImg ? `pfe-src=\"${this.avatarImg}\" ` : ``}>\n      </pfe-avatar>\n      ${this.avatarBadges && this.avatarBadges.avatar ?\n        this.avatarBadges.avatar\n        : ''\n      }\n    </div>`\n: ''}\n    <div class=\"comment-body\">\n      <label for=\"textarea\" class=\"sr-only\">Add your comment:</label>\n      <textarea id=\"textarea\" required aria-multiline=\"true\" placeholder=\"Add comment\" class=\"text-full form-textarea required edit-comment-body\" name=\"comment_body\" cols=\"60\" rows=\"5\">${this.comment && this.comment.raw ? this.comment.raw : '' }</textarea>\n\n      <div class=\"comments-add-comment-actions\">\n\n        <div class=\"formatting-help\">\n          <a href=\"/help/markdown\" target=\"_blank\" class=\"format-link\">\n            ${CpComments.translations[this.parentCpComments.lang].formattingHelp}\n            <span class=\"sr-only\">(opens in new window)</span>\n          </a>\n        </div>\n\n        ${this.comment && this.comment.cid ?\n          `<input type=\"hidden\" name=\"cid\" value=\"${this.comment.cid}\">`\n        : ''}\n        <input type=\"hidden\" name=\"form_created\" value=\"${this.data.req}\">\n        <input type=\"hidden\" name=\"form_token\" value=\"${this.data.token}\">\n        <input type=\"hidden\" name=\"parent_comment_id\" value=\"${this.parent && this.parent.cid ? this.parent.cid : ''}\">\n\n        <div class=\"form-item form-type-checkbox form-item-field-subscription_notify-und\">\n          <label class=\"option\">\n            <input type=\"checkbox\" class=\"subscription_notify\" name=\"subscription_notify\" value=\"1\" ${(this.comment.subscription_notify == 1) ? 'checked' : '' }>\n            ${CpComments.translations[this.parentCpComments.lang].sendNotifications}\n          </label>\n        </div>\n\n        ${this.data && this.data.requester.private_comments ?\n          `<div class=\"form-item form-type-checkbox form-item-field-kcs-private-comment-und\" ${this.parent ? (this.parent.private==1 ? 'style=\"display:none\"' : '' ) : '' }>\n            <label class=\"option\">\n              <input type=\"checkbox\" name=\"private_comment\" value=\"1\" ${(this.comment && this.comment.private==1) || (this.parent && this.parent.private==1) ? 'checked' : '' } class=\"form-checkbox mark-private\">\n              ${CpComments.translations[this.parentCpComments.lang].markAsPrivate}\n            </label>\n          </div>`\n          : ''}\n\n        <div class=\"add-comment-buttons\">\n          <pfe-button>\n            <button type=\"submit\">${CpComments.translations[this.parentCpComments.lang].submit}</button>\n          </pfe-button>\n        </div>\n      </div> \n    </div>\n${this.dataset.editForm !== 'true' ?\n  `</div>`\n: ''}\n</form>`;\n  }\n  get postEventType() {\n    return \"cpcomments-post\";\n  }\n  get postEventHandlerType() {\n    return \"cpcomments-post-handler\";\n  }\n\n  static get tag() {\n    return \"cp-comments-form\";\n  }\n\n  static get templateUrl() {\n    return \"cp-comments-form.html\";\n  }\n\n  static get styleUrl() {\n    return \"cp-comments-form.css\";\n  }\n\n  constructor() {\n    super(CpCommentsForm, { delayRender: true });\n\n    // Bind methods so 'this' will point to the instance of the component\n    this.formSubmitHandler = this.formSubmitHandler.bind(this);\n    this.keydownHandler = this.keydownHandler.bind(this);\n  }\n\n  /**\n   * Called when the tag is processed in the DOM.\n   *\n   * @callback\n    */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._upgradeProperty(\"comment\");\n    this._upgradeProperty(\"data\");\n    this._upgradeProperty(\"parent\");\n\n    // If comment status isn't 2, new comments are disabled, or comments are hidden.\n    const newCommentsAllowed = this.data.comment_status === '2';\n    const isEdit = this.dataset.editForm && this.dataset.editForm === 'true';\n    const hasPostPermission = this.data && this.data.requester && this.data.requester.post_comments;\n\n    // Attempt to retrieve requester info from the API response.\n    if (this.data && this.data.requester && this.data.requester.profile && this.data.requester.profile.full_name) {\n      const profile = this.data.requester.profile;\n      const badgesList = this.data.badges ? this.data.badges : {};\n      const badges = profile.badges && Array.isArray(profile.badges) ? profile.badges : [];\n      this.avatarFullName = profile.full_name ? profile.full_name : null;\n      this.avatarImg = profile.profile_img ? profile.profile_img : null;\n      this.avatarBadges = getProfileBadges(badges, badgesList);\n    }\n\n    // Retrieve at least the user's name via the session as a fallback.\n    if (!this.avatarFullName) {\n      const session = this.getSession(false);\n      if (session.getUserInfo) {\n        const userInfo = session.getUserInfo();\n        if (userInfo.firstName && userInfo.lastName) {\n          const fullName = `${userInfo.firstName} ${userInfo.lastName}`;\n          this.avatarFullName = fullName;\n        }\n      }\n    }\n\n    // Render the form, unless this is a non-edit, new comments aren't allowed, or the user doesn't have the correct permissions\n    if (this.data && (newCommentsAllowed || isEdit) && hasPostPermission) {\n      this.render();\n      this.submitButton = this.shadowRoot.querySelector('pfe-button');\n      this.avatar = this.shadowRoot.querySelector('pfe-avatar');\n    }\n    else {\n      return;\n    }\n\n    // Find the form DOM.\n    const formElement = this.shadowRoot.querySelector(\".comment-form\");\n\n    this.formElement = formElement;\n\n    // Handle submit events.\n    formElement.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.formSubmitHandler(event);\n    });\n\n    formElement.addEventListener('keydown', this.keydownHandler);\n  }\n\n  /**\n   * Keydown handler for delete confirmation\n   * @param {KeyboardEvent} event\n   */\n  keydownHandler (event) {\n    const key = event.key;\n    const ctrlKeyDown = event.ctrlKey;\n    const shiftKeyDown = event.shiftKey;\n\n    // Allow Ctrl + Enter to submit form\n    if (key === 'Enter' && ctrlKeyDown && !shiftKeyDown) {\n      event.preventDefault();\n      event.stopPropagation();\n      // submit() method doesn't trigger event, requestSubmit does.\n      this.formElement.requestSubmit();\n    }\n  }\n\n  /**\n   * AJAX event logic when form is submitted.\n   *\n   * @param event\n   * Event object.\n   */\n  formSubmitHandler(event) {\n    let dom = event.target;\n    let data = this.data;\n    let comment = event.target.comment || this.comment;\n    const $parentCpComments = this.parentCpComments;\n\n    // Assemble form data for submitting to API.\n    let payload = {};\n    payload.raw = dom.getElementsByClassName(\"edit-comment-body\")[0].value;\n\n    // Get private status\n    const $isPrivateCheckbox = dom.querySelector(\".mark-private\");\n    // CPCORE-9468 - Was sending null without ternary, null would cause comments to be marked private\n    payload.private = $isPrivateCheckbox && $isPrivateCheckbox.checked ? true : false;\n    payload.flags = payload.private ? [\"private\"] : [];\n\n    // Get subscription\n    const $notifySubscribersCheckbox = dom.querySelector(\".subscription_notify\");\n    payload.subscription_notify = $notifySubscribersCheckbox && $notifySubscribersCheckbox.checked;\n\n    // Set payload parent and comment IDs.\n    payload.pid = comment && comment.pid ? comment.pid : 0;\n    payload.cid = comment && comment.cid ? comment.cid : 0;\n\n    // Validate form values submitted.\n    if (this.validateCommentFormValues(payload, this) === false) {\n      // Form validation failed; Stop processing comment post.\n      return false;\n    }\n\n    // Disable the submit button\n    if (this.submitButton) this.submitButton.setAttribute('disabled', '');\n\n    const $placeholder = $parentCpComments.renderLoader('form-submit-placeholder');\n\n    let fetchUrl = $parentCpComments.getCommentApiBasePath();\n    const fetchOptions = $parentCpComments.getGlobalFetchOptions();\n    fetchOptions.method = 'POST';\n    let fetchDataHandler;\n\n    /**\n     * New comment submit\n     */\n    if (this.parentElement.classList.contains('post-comment-form')) {\n      // We want this to be inserted at the bottom of comments & not hide the form hidden.\n      let commentList = this.parentElement.parentElement;\n      commentList.append($placeholder);\n\n      fetchOptions.body = JSON.stringify(payload);\n\n      /**\n       * Handle new comment API response (not reply)\n       * @param {object} data JSON response from API\n       */\n      fetchDataHandler = (data) => {\n        data = $parentCpComments._getDataFromResponse(data);\n        if (!data) {\n          console.error('cp-comments-form.formSubmitHandler: Didn\\'t receive data from API', data);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].postingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'posting-error'}\n          );\n          return false;\n        }\n        const comment = data.comment;\n        if (!comment || !comment.cid) {\n          console.error(`cp-comments-form.formSubmitHandler: Didn't get valid comment in API response`);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].postingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'posting-error'}\n          );\n        }\n\n        const comments = {};\n        comments[comment.cid] = comment;\n        $parentCpComments.updateCommentDataAndRender(comments);\n        this.commentCount = data.total_results;\n        this.emitEvent('cp-comments:comment-added', { detail: { cpComments: this, commentCount: data.total_results }});\n\n        // Clear form after submission. So they can add fresh comments.\n        dom.reset();\n        if (this.submitButton) this.submitButton.removeAttribute('disabled', '');\n\n        // Remove the pinwheel\n        $placeholder.remove();\n\n        $parentCpComments.addStatusMessage(\n          CpComments.translations[$parentCpComments.lang].postSuccess,\n          '',\n          'success',\n          // Per Kelsey's feedback, post success should be an alert\n          {alert: true}\n        );\n      };\n    }\n    /**\n     * Reply submit\n     */\n    else if (this.parentElement.classList.contains('reply-comment-form')) {\n      // Pull the parent id from the form values.\n      const pidField = dom.querySelector(\"[name=parent_comment_id]\");\n      payload.pid = 0;\n      if (pidField && pidField.value) {\n        payload.pid = pidField.value;\n      }\n\n      fetchOptions.body = JSON.stringify(payload);\n\n      /**\n       * Handle new reply API response\n       * @param {object} data JSON response from API\n       */\n      fetchDataHandler = (data) => {\n        data = $parentCpComments._getDataFromResponse(data);\n        if (!data) {\n          console.error('cp-comments-form.formSubmitHandler: Didn\\'t receive data from API', data);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].postingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'posting-error'}\n          );\n          return false;\n        }\n\n        const comment = data.comment;\n        if (!comment || !comment.cid) {\n          console.error(`cp-comments-comment.editLink: Didn't get valid comment in API response`);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].postingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'posting-error'}\n          );\n        }\n\n        const comments = {};\n        comments[comment.cid] = comment;\n\n        // Remove the reply form and it's wrapper from the DOM\n        this.parentElement.remove();\n\n        $parentCpComments.updateCommentDataAndRender(comments);\n        this.commentCount = data.total_results;\n        this.emitEvent('cp-comments:comment-added', { detail: { cpComments: this, commentCount: data.total_results }});\n\n        $parentCpComments.addStatusMessage(\n          CpComments.translations[$parentCpComments.lang].postSuccess,\n          '',\n          'success',\n          // Per Kelsey's feedback, post success should be an alert\n          {alert: true}\n        );\n      };\n    }\n    /**\n     * Edit submit\n     */\n    else if (this.parentElement.classList.contains('edit-comment-form')) {\n      fetchUrl = `${fetchUrl}/${comment.cid}`;\n      fetchOptions.method = 'PUT';\n      fetchOptions.body = JSON.stringify(payload);\n\n      /**\n       * Handle edit comment API response\n       * @param {object} data JSON response from API\n       */\n      fetchDataHandler = (data) => {\n        data = $parentCpComments._getDataFromResponse(data);\n        if (!data) {\n          console.error('cp-comments-form.formSubmitHandler: Didn\\'t receive data from API', data);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].editingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'editing-error'}\n          );\n          return false;\n        }\n        const comment = data.comment;\n        if (!comment || !comment.cid) {\n          console.error(`cp-comments-comment.editLink: Didn't get valid comment in edit API response`);\n          $parentCpComments.addStatusMessage(\n            CpComments.translations[$parentCpComments.lang].editingErrorTitle,\n            CpComments.translations[$parentCpComments.lang].reloadPageToTest,\n            'error',\n            {id: 'editing-error'}\n          );\n        }\n\n        const comments = {};\n        comments[comment.cid] = comment;\n        $parentCpComments.updateCommentDataAndRender(comments);\n        $parentCpComments.addStatusMessage(\n          CpComments.translations[$parentCpComments.lang].postSuccess,\n          '',\n          'success',\n          // Per Kelsey's feedback, post success should be an alert\n          {alert: true}\n        );\n      };\n    }\n\n    if (fetchUrl && fetchOptions && fetchDataHandler) {\n      fetch(fetchUrl, fetchOptions)\n        .then(handleFetchResponse)\n        .then((data) => {\n          fetchDataHandler(data);\n        });\n    }\n    else {\n      console.error('cp-comments-form.formSubmitHandler: Couldn\\'t submit form, didn\\'t have necessary variables', {fetchUrl, fetchOptions, fetchDataHandler});\n      $parentCpComments.addStatusMessage(\n        CpComments.translations[$parentCpComments.lang].submittingError,\n        '',\n        'error',\n      );\n\n    }\n\n    // Prevent the form from submitting, which would cause a page refresh\n    return false;\n  }\n\n  /**\n   * Client side validation around the comment form.\n   *\n   * @param payload\n   * Form data being submitted to drupal's API.\n   * @param form\n   * Form that is being validated on.\n   *\n   * @returns {boolean}\n   * Returns false if any errors are triggered.\n   */\n  validateCommentFormValues(payload, form) {\n    // Make sure comment data is not blank.\n    if (payload.raw === \"\") {\n      // Message error.\n      let msg = \"Comment body cannot be blank.\";\n      // Insert msg onto the page.\n      form.shadowRoot.prepend(this.formAlertError(msg));\n      // Make form element highlighted.\n      form.shadowRoot.querySelector(\".edit-comment-body\").style.borderColor =\n        \"red\";\n      return false;\n    }\n\n    // Make sure API gets a number for cid or it is set to null.\n    if (payload.cid && parseInt(payload.cid) != payload.cid) {\n      // Message error.\n      let msg = \"The comment ID is not numeric.\";\n      // Insert msg onto the page.\n      form.shadowRoot.prepend(this.formAlertError(msg));\n      return false;\n    }\n\n    // Make sure API gets a number for a user id.\n    if (payload.uid && parseInt(payload.uid) != payload.uid) {\n      // Message error.\n      let msg = \"The User ID is not numeric.\";\n      // Insert msg onto the page.\n      form.shadowRoot.prepend(this.formAlertError(msg));\n      return false;\n    }\n  }\n\n  /**\n   * Creates an alert message for form validation.\n   *\n   * @param msg\n   * Message you want to send.\n   *\n   * @returns {HTMLElement}\n   * Html built for the alert class you want to insert.\n   */\n  formAlertError(msg) {\n    // Create error wrapper div.\n    let error = document.createElement(\"div\");\n    error.setAttribute(\"class\", \"alert alert-danger alert-w-icon\");\n\n    // Create h2 element in alert.\n    let alert = document.createElement(\"h2\");\n    alert.setAttribute(\"class\", \"element-invisible\");\n    alert.innerHTML = CpComments.translations[this.parentCpComments.lang].error;\n\n    // Create Span element in alert.\n    let span = document.createElement(\"span\");\n    span.setAttribute(\"class\", \"icon-warning alert-icon\");\n    span.setAttribute(\"aria-hidden\", \"true\");\n    error.innerHTML = msg;\n\n    // Build alert warning.\n    error.append(alert);\n    error.append(span);\n\n    return error;\n  }\n\n  /**\n   * Safely catch property values on connect.\n   *\n   * A user may set a property on an instance of an element, before its prototype has been connected to this class.\n   * The _upgradeProperty() method will check for any instance properties and run them through the proper class setters.\n   * @param prop\n   * @private\n   */\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      let value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\n\nPFElement.create(CpComments);\nPFElement.create(CpCommentsComment);\nPFElement.create(CpCommentsForm);\n\nexport default CpComments;\n//# sourceMappingURL=cp-comments.js.map\n"],
  "mappings": "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",
  "names": []
}
